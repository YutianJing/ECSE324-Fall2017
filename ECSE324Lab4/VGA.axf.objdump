
//campus.mcgill.ca/emf/CPE/yjing4/Desktop/G21-lab4/VGA.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 4c 09 00 00 50 09 00 00 54 09 00 00     @...L...P...T...
  30:	58 09 00 00 48 09 00 00 5c 09 00 00 60 09 00 00     X...H...\...`...

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000202 	bl	8e4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000a48 	.word	0x00000a48

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000e80 	.word	0x00000e80

00000124 <__cs3_heap_start_ptr>:
 124:	00000ea8 	.word	0x00000ea8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000e88 	.word	0x00000e88
 170:	00000e8b 	.word	0x00000e8b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000e88 	.word	0x00000e88
 1bc:	00000e88 	.word	0x00000e88
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000e88 	.word	0x00000e88
 200:	00000000 	.word	0x00000000
 204:	000009ec 	.word	0x000009ec

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000009ec 	.word	0x000009ec
 250:	00000e8c 	.word	0x00000e8c
 254:	00000a48 	.word	0x00000a48
 258:	00000000 	.word	0x00000000

0000025c <VGA_clear_charbuff_ASM>:



VGA_clear_charbuff_ASM:

		MOV R0, #60     //Y COUNTER
 25c:	e3a0003c 	mov	r0, #60	; 0x3c
		MOV R1, #79	   //X COUNTER
 260:	e3a0104f 	mov	r1, #79	; 0x4f
		MOV R5, R1	  //TO RESET Y COUNTER
 264:	e1a05001 	mov	r5, r1
		LDR R2, =CHARBUFF_BASE
 268:	e3a024c9 	mov	r2, #-922746880	; 0xc9000000
		MOV R3, #0
 26c:	e3a03000 	mov	r3, #0

00000270 <OUTERLOOP1>:
		
OUTERLOOP1:
		SUB R0, R0, #1
 270:	e2400001 	sub	r0, r0, #1
		CMP R0, #0	
 274:	e3500000 	cmp	r0, #0
		BLT CLEARDONE
 278:	ba000009 	blt	2a4 <CLEARDONE>
		MOV R1, #79		//RESET X
 27c:	e3a0104f 	mov	r1, #79	; 0x4f

00000280 <INNERLOOP1>:

		
INNERLOOP1:

		CMP R1, #0
 280:	e3510000 	cmp	r1, #0
		BLT OUTERLOOP1		//DONE WITH X, BACK TO NEW OUTTERLOOP
 284:	bafffff9 	blt	270 <OUTERLOOP1>
		
		MOV R4, R0		//GET Y COUNTER
 288:	e1a04000 	mov	r4, r0
		LSL R4, #7		//ADD 0000000
 28c:	e1a04384 	lsl	r4, r4, #7
		ORR R4, R4, R2
 290:	e1844002 	orr	r4, r4, r2
		ORR R4, R4, R1		// ADD IN X COUNTER
 294:	e1844001 	orr	r4, r4, r1
			
		STRB R3, [R4]
 298:	e5c43000 	strb	r3, [r4]
		SUB R1, R1, #1		//DECRESE X COUNTER
 29c:	e2411001 	sub	r1, r1, #1
		B INNERLOOP1
 2a0:	eafffff6 	b	280 <INNERLOOP1>

000002a4 <CLEARDONE>:
		

CLEARDONE:
		BX LR
 2a4:	e12fff1e 	bx	lr

000002a8 <VGA_clear_pixelbuff_ASM>:


VGA_clear_pixelbuff_ASM:

		MOV R0, #300  	 //X COUNTER
 2a8:	e3a00f4b 	mov	r0, #300	; 0x12c
		ADD R0, R0, #19
 2ac:	e2800013 	add	r0, r0, #19

		MOV R1, #240	//Y COUNTER
 2b0:	e3a010f0 	mov	r1, #240	; 0xf0
		MOV R5, R1		//TO RESET Y COUNTER
 2b4:	e1a05001 	mov	r5, r1
		LDR R2, =PIXELBUFF_BASE
 2b8:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
		MOV R3, #0
 2bc:	e3a03000 	mov	r3, #0

000002c0 <OUTERLOOP>:

OUTERLOOP:

		SUB R1, R1, #1		//SUB Y COUNTER
 2c0:	e2411001 	sub	r1, r1, #1
		CMP R1, #0	
 2c4:	e3510000 	cmp	r1, #0
		BLT PIXDONE
 2c8:	ba00000c 	blt	300 <PIXDONE>
		MOV R0, #300		//RESET X
 2cc:	e3a00f4b 	mov	r0, #300	; 0x12c
		ADD R0, R0, #19
 2d0:	e2800013 	add	r0, r0, #19

000002d4 <INNERLOOP>:

		
INNERLOOP:
		CMP R0, #0
 2d4:	e3500000 	cmp	r0, #0
		BLT OUTERLOOP		//DONE WITH X, BACK TO NEW OUTTERLOOP
 2d8:	bafffff8 	blt	2c0 <OUTERLOOP>
		
		MOV R4, R1			//COPY Y COUNTER
 2dc:	e1a04001 	mov	r4, r1
		LSL R4, R4, #10		//ADD 000000000 0
 2e0:	e1a04504 	lsl	r4, r4, #10

		MOV R6, R0		//X COUNTER COPY FOR SHIFTING
 2e4:	e1a06000 	mov	r6, r0
		LSL R6, #1		//LEFT SHIFT
 2e8:	e1a06086 	lsl	r6, r6, #1
		ORR R4, R4, R6		// ADD THE X COUNTER
 2ec:	e1844006 	orr	r4, r4, r6
		ORR R4, R4, R2
 2f0:	e1844002 	orr	r4, r4, r2

		STRH R3, [R4]
 2f4:	e1c430b0 	strh	r3, [r4]
		SUB R0, R0, #1		//DECRESE Y COUNTER
 2f8:	e2400001 	sub	r0, r0, #1
		B INNERLOOP
 2fc:	eafffff4 	b	2d4 <INNERLOOP>

00000300 <PIXDONE>:

PIXDONE:
		BX LR
 300:	e12fff1e 	bx	lr

00000304 <VGA_write_char_ASM>:
VGA_write_char_ASM:
// WILL store the value of third input at address calculated by the first two
//will check the coord
//r0 = x r1 =y r2 = ASCII

		LDR R5, =CHARBUFF_BASE
 304:	e3a054c9 	mov	r5, #-922746880	; 0xc9000000

		CMP R0, #79		//CHECK RANGE
 308:	e350004f 	cmp	r0, #79	; 0x4f
		BGT CHARWRITEDONE
 30c:	ca00000a 	bgt	33c <CHARWRITEDONE>
		CMP R0, #0
 310:	e3500000 	cmp	r0, #0
		BLT CHARWRITEDONE
 314:	ba000008 	blt	33c <CHARWRITEDONE>
		CMP R1, #59
 318:	e351003b 	cmp	r1, #59	; 0x3b
		BGT CHARWRITEDONE
 31c:	ca000006 	bgt	33c <CHARWRITEDONE>

		CMP R1, #0
 320:	e3510000 	cmp	r1, #0
		BLT CHARWRITEDONE
 324:	ba000004 	blt	33c <CHARWRITEDONE>


		MOV R4, R1
 328:	e1a04001 	mov	r4, r1
		LSL R4, R4, #7		//ADD 0000000 2^7
 32c:	e1a04384 	lsl	r4, r4, #7
		ORR R4, R4, R0
 330:	e1844000 	orr	r4, r4, r0
		ORR R4, R4, R5			//GET THE ADDRESS
 334:	e1844005 	orr	r4, r4, r5
		STRB R2, [R4]
 338:	e5c42000 	strb	r2, [r4]

0000033c <CHARWRITEDONE>:


CHARWRITEDONE:

		BX LR
 33c:	e12fff1e 	bx	lr

00000340 <VGA_write_byte_ASM>:

//R0 = X; R1=Y; R2 = BYTE TO BE WRITE



		LDR R5, =CHARBUFF_BASE
 340:	e3a054c9 	mov	r5, #-922746880	; 0xc9000000

		CMP R0, #79		//CHECK RANGE
 344:	e350004f 	cmp	r0, #79	; 0x4f
		BGT BYTEWRITEDONE
 348:	ca00001f 	bgt	3cc <BYTEWRITEDONE>
		CMP R0, #0
 34c:	e3500000 	cmp	r0, #0
		BLT BYTEWRITEDONE
 350:	ba00001d 	blt	3cc <BYTEWRITEDONE>
		CMP R1, #59
 354:	e351003b 	cmp	r1, #59	; 0x3b
		BGT BYTEWRITEDONE
 358:	ca00001b 	bgt	3cc <BYTEWRITEDONE>

		CMP R1, #0
 35c:	e3510000 	cmp	r1, #0
		BLT BYTEWRITEDONE
 360:	ba000019 	blt	3cc <BYTEWRITEDONE>


// store first four bits in memory location indicated by input

		MOV R3, R2		// copy input into another register
 364:	e1a03002 	mov	r3, r2
		LSR R3, #4		// remove rightmost bits from input
 368:	e1a03223 	lsr	r3, r3, #4
		CMP R3, #10		// check if the hex digit is a letter or number
 36c:	e353000a 	cmp	r3, #10
		ADDGE R3, R3, #55	// ASCII letter
 370:	a2833037 	addge	r3, r3, #55	; 0x37
		ADDLT R3, R3, #48	// ASCII number
 374:	b2833030 	addlt	r3, r3, #48	; 0x30
		MOV R4, R1		// take y value
 378:	e1a04001 	mov	r4, r1
		LSL R4, R4, #7		
 37c:	e1a04384 	lsl	r4, r4, #7
		ORR R4, R4, R5		// get base address in there
 380:	e1844005 	orr	r4, r4, r5
		ORR R4, R4, R0 		// add in the x counter
 384:	e1844000 	orr	r4, r4, r0
		STRB R3, [R4]	// store the input value to the address	
 388:	e5c43000 	strb	r3, [r4]



		ADD R0, R0, #1	// increment x address by 1 to go to next grid spot
 38c:	e2800001 	add	r0, r0, #1
		CMP R0, #79		// check if the x counter has reached the right side of the screen
 390:	e350004f 	cmp	r0, #79	; 0x4f
		MOVGT R0, #0	// if yes, send x back to 0 (left side)
 394:	c3a00000 	movgt	r0, #0
		ADDGT R1, #1	// if yes, increment y by 1
 398:	c2811001 	addgt	r1, r1, #1
		CMP R1, #59		// check if the y counter has reached the bottom of the screen
 39c:	e351003b 	cmp	r1, #59	; 0x3b
		MOVGT R1, #0		// if yes, send y back to 0 (top)
 3a0:	c3a01000 	movgt	r1, #0



// store second four bits in memory location indicated by x and y

		MOV R3, #0xF	// get 1s in the last 4 bits
 3a4:	e3a0300f 	mov	r3, #15
		AND R2, R3		// keep last four bits of input
 3a8:	e0022003 	and	r2, r2, r3
		CMP R2, #10
 3ac:	e352000a 	cmp	r2, #10

		ADDGE R2, R2, #55	// ASCII letter
 3b0:	a2822037 	addge	r2, r2, #55	; 0x37
		ADDLT R2, R2, #48	// ASCII number
 3b4:	b2822030 	addlt	r2, r2, #48	; 0x30

		MOV R4, R1		// take y value
 3b8:	e1a04001 	mov	r4, r1
		LSL R4, #7
 3bc:	e1a04384 	lsl	r4, r4, #7
		ORR R4, R4, R5		// get base address in there
 3c0:	e1844005 	orr	r4, r4, r5
		ORR R4, R4, R0 		// add in the x counter
 3c4:	e1844000 	orr	r4, r4, r0
		STRB R2, [R4]	// store the input value to the address
 3c8:	e5c42000 	strb	r2, [r4]

000003cc <BYTEWRITEDONE>:

BYTEWRITEDONE:

		BX LR
 3cc:	e12fff1e 	bx	lr

000003d0 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:


		LDR R5, =PIXELBUFF_BASE
 3d0:	e3a05332 	mov	r5, #-939524096	; 0xc8000000

		
		MOV R3, #300  	 //X COUNTER
 3d4:	e3a03f4b 	mov	r3, #300	; 0x12c
		ADD R3, R3, #19
 3d8:	e2833013 	add	r3, r3, #19
		CMP R0, R3				// check that x is within the allowed range
 3dc:	e1500003 	cmp	r0, r3
		BGT DRAWDONE
 3e0:	ca00000c 	bgt	418 <DRAWDONE>

		CMP R0, #0 
 3e4:	e3500000 	cmp	r0, #0
		BLT DRAWDONE
 3e8:	ba00000a 	blt	418 <DRAWDONE>

		CMP R1, #239			// check that y is within the allowed range
 3ec:	e35100ef 	cmp	r1, #239	; 0xef
		BGT DRAWDONE
 3f0:	ca000008 	bgt	418 <DRAWDONE>

		CMP R1, #0
 3f4:	e3510000 	cmp	r1, #0
		BLT DRAWDONE
 3f8:	ba000006 	blt	418 <DRAWDONE>


		MOV R4, R1			// take y value
 3fc:	e1a04001 	mov	r4, r1
		LSL R4, R4, #10
 400:	e1a04504 	lsl	r4, r4, #10
		ORR R4, R4, R5			// get base address in there
 404:	e1844005 	orr	r4, r4, r5
		MOV R6, R0 			// make a copy of the x counter
 408:	e1a06000 	mov	r6, r0
		LSL R6, #1			// shift one digit left
 40c:	e1a06086 	lsl	r6, r6, #1
		ORR R4, R4, R6 			// add in the x counter
 410:	e1844006 	orr	r4, r4, r6
		STRH R2, [R4]		// store the input value to the address		// TODO: check that STRB is ok
 414:	e1c420b0 	strh	r2, [r4]

00000418 <DRAWDONE>:


DRAWDONE:

	
		BX LR				// leave
 418:	e12fff1e 	bx	lr

0000041c <main>:





int main(){
 41c:	e92d4800 	push	{r11, lr}
 420:	e28db004 	add	r11, sp, #4
 424:	e24dd008 	sub	sp, sp, #8
		//frequency = 100Hz

		//for each period, 480 samples
		// for every 240 sample, write a "1"
		// after 240 samples, write a "0"
	int data = 0x00FFFFFF;
 428:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 42c:	e50b3008 	str	r3, [r11, #-8]
	int x = 0; //counter
 430:	e3a03000 	mov	r3, #0
 434:	e50b300c 	str	r3, [r11, #-12]
 438:	ea000000 	b	440 <main+0x24>
				}else{
					data = 0;	
				}
			}
		}
	}
 43c:	e1a00000 	nop			; (mov r0, r0)
	int x = 0; //counter


	while(1){

		if(audio_ASM(data)){	
 440:	e51b0008 	ldr	r0, [r11, #-8]
 444:	eb000046 	bl	564 <audio_ASM>
 448:	e1a03000 	mov	r3, r0
 44c:	e3530000 	cmp	r3, #0
 450:	0afffff9 	beq	43c <main+0x20>
			x++;
 454:	e51b300c 	ldr	r3, [r11, #-12]
 458:	e2833001 	add	r3, r3, #1
 45c:	e50b300c 	str	r3, [r11, #-12]
// if counter is smaller than 240, write '1'
// the other half, write '0'

//x reach 240, change data
			if(x > 239){
 460:	e51b300c 	ldr	r3, [r11, #-12]
 464:	e35300ef 	cmp	r3, #239	; 0xef
 468:	dafffff3 	ble	43c <main+0x20>
			//audio_ASM(0);
				x = 0;
 46c:	e3a03000 	mov	r3, #0
 470:	e50b300c 	str	r3, [r11, #-12]
				if(data == 0){
 474:	e51b3008 	ldr	r3, [r11, #-8]
 478:	e3530000 	cmp	r3, #0
 47c:	1a000002 	bne	48c <main+0x70>
					data = 0x00FFFFFF;
 480:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 484:	e50b3008 	str	r3, [r11, #-8]
				}else{
					data = 0;	
				}
			}
		}
	}
 488:	eaffffeb 	b	43c <main+0x20>
			//audio_ASM(0);
				x = 0;
				if(data == 0){
					data = 0x00FFFFFF;
				}else{
					data = 0;	
 48c:	e3a03000 	mov	r3, #0
 490:	e50b3008 	str	r3, [r11, #-8]
				}
			}
		}
	}
 494:	eaffffe8 	b	43c <main+0x20>

00000498 <read_PB_data_ASM>:
 498:	e59f1074 	ldr	r1, [pc, #116]	; 514 <disable_PB_INT_ASM+0x14>
 49c:	e5910000 	ldr	r0, [r1]
 4a0:	e12fff1e 	bx	lr

000004a4 <PB_data_is_pressed_ASM>:
 4a4:	e59f1068 	ldr	r1, [pc, #104]	; 514 <disable_PB_INT_ASM+0x14>
 4a8:	e5912000 	ldr	r2, [r1]
 4ac:	e0000002 	and	r0, r0, r2
 4b0:	e3300000 	teq	r0, #0
 4b4:	13a00001 	movne	r0, #1
 4b8:	e12fff1e 	bx	lr

000004bc <read_PB_edgecap_ASM>:
 4bc:	e59f1054 	ldr	r1, [pc, #84]	; 518 <disable_PB_INT_ASM+0x18>
 4c0:	e5910000 	ldr	r0, [r1]
 4c4:	e12fff1e 	bx	lr

000004c8 <PB_edgecap_is_pressed_ASM>:
 4c8:	e59f1048 	ldr	r1, [pc, #72]	; 518 <disable_PB_INT_ASM+0x18>
 4cc:	e5912000 	ldr	r2, [r1]
 4d0:	e0000002 	and	r0, r0, r2
 4d4:	e3300000 	teq	r0, #0
 4d8:	13a00001 	movne	r0, #1
 4dc:	e12fff1e 	bx	lr

000004e0 <PB_clear_edgecp_ASM>:
 4e0:	e59f1030 	ldr	r1, [pc, #48]	; 518 <disable_PB_INT_ASM+0x18>
 4e4:	e5810000 	str	r0, [r1]
 4e8:	e12fff1e 	bx	lr

000004ec <enable_PB_INT_ASM>:
 4ec:	e59f1028 	ldr	r1, [pc, #40]	; 51c <disable_PB_INT_ASM+0x1c>
 4f0:	e5912000 	ldr	r2, [r1]
 4f4:	e1800002 	orr	r0, r0, r2
 4f8:	e5810000 	str	r0, [r1]
 4fc:	e12fff1e 	bx	lr

00000500 <disable_PB_INT_ASM>:
 500:	e59f1014 	ldr	r1, [pc, #20]	; 51c <disable_PB_INT_ASM+0x1c>
 504:	e5912000 	ldr	r2, [r1]
 508:	e1c00002 	bic	r0, r0, r2
 50c:	e5810000 	str	r0, [r1]
 510:	e12fff1e 	bx	lr
 514:	ff200050 	.word	0xff200050
 518:	ff20005c 	.word	0xff20005c
 51c:	ff200058 	.word	0xff200058

00000520 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 520:	e59f1004 	ldr	r1, [pc, #4]	; 52c <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 524:	e5910000 	ldr	r0, [r1]
	BX LR
 528:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 52c:	ff200040 	.word	0xff200040

00000530 <read_PS2_data_ASM>:
//RVALID = 15BIT


read_PS2_data_ASM:

		LDR R2, =PS2DATA_BASE
 530:	e59f2028 	ldr	r2, [pc, #40]	; 560 <DONE+0x8>
		LDR R3, [R2]
 534:	e5923000 	ldr	r3, [r2]

		MOV R4, #32768  //only left with rvalid bit
 538:	e3a04902 	mov	r4, #32768	; 0x8000
		TST R4, R3		
 53c:	e1140003 	tst	r4, r3
		BEQ DONE
 540:	0a000004 	beq	558 <DONE>



		//RVALID = 1
		LDR R1, =PS2DATA_BASE
 544:	e59f1014 	ldr	r1, [pc, #20]	; 560 <DONE+0x8>
		LDRB R5, [R1]
 548:	e5d15000 	ldrb	r5, [r1]
		STRB R5, [R0]				// store data in the char pointer 
 54c:	e5c05000 	strb	r5, [r0]
		MOV R0, #1					// return 1
 550:	e3a00001 	mov	r0, #1
		BX LR
 554:	e12fff1e 	bx	lr

00000558 <DONE>:

DONE: 
		MOV R0, #0		
 558:	e3a00000 	mov	r0, #0
		BX LR
 55c:	e12fff1e 	bx	lr
//RVALID = 15BIT


read_PS2_data_ASM:

		LDR R2, =PS2DATA_BASE
 560:	ff200100 	.word	0xff200100

00000564 <audio_ASM>:


audio_ASM:


			LDR R1, =FIFOSPACE_BASE		//LOAD THE ADDRESS
 564:	e59f1040 	ldr	r1, [pc, #64]	; 5ac <END+0x4>
			LDR R2, [R1]
 568:	e5912000 	ldr	r2, [r1]

			AND R3, R2, #0xFF000000		//LEFT ONLY WSLC
 56c:	e20234ff 	and	r3, r2, #-16777216	; 0xff000000
			LSR R3, R3, #24
 570:	e1a03c23 	lsr	r3, r3, #24
			CMP R3, #0				// if wslc value not equal to 0; return 1
 574:	e3530000 	cmp	r3, #0
			MOVEQ R0, #0			
 578:	03a00000 	moveq	r0, #0
			BEQ END					//if =0, return r0 = 0
 57c:	0a000009 	beq	5a8 <END>

		

			AND R4, R2, #0x00FF0000		//LEFT ONLY WSRC
 580:	e20248ff 	and	r4, r2, #16711680	; 0xff0000
			LSR R4, R4, #16
 584:	e1a04824 	lsr	r4, r4, #16
			CMP R4, #0
 588:	e3540000 	cmp	r4, #0
			MOVEQ R0, #0
 58c:	03a00000 	moveq	r0, #0
			BEQ END
 590:	0a000004 	beq	5a8 <END>


			//WRITE DATA IF HAVE SPACE

			LDR R5, =LEFTDATA_BASE
 594:	e59f5014 	ldr	r5, [pc, #20]	; 5b0 <END+0x8>
			LDR R6, =RIGHTDATA_BASE
 598:	e59f6014 	ldr	r6, [pc, #20]	; 5b4 <END+0xc>
			
			STR R0, [R5]
 59c:	e5850000 	str	r0, [r5]
			STR R0, [R6]
 5a0:	e5860000 	str	r0, [r6]
			MOV R0, #1
 5a4:	e3a00001 	mov	r0, #1

000005a8 <END>:

END:		
			BX LR
 5a8:	e12fff1e 	bx	lr


audio_ASM:


			LDR R1, =FIFOSPACE_BASE		//LOAD THE ADDRESS
 5ac:	ff203044 	.word	0xff203044
			BEQ END


			//WRITE DATA IF HAVE SPACE

			LDR R5, =LEFTDATA_BASE
 5b0:	ff203048 	.word	0xff203048
			LDR R6, =RIGHTDATA_BASE
 5b4:	ff20304c 	.word	0xff20304c

000005b8 <atexit>:
 5b8:	e1a01000 	mov	r1, r0
 5bc:	e3a00000 	mov	r0, #0
 5c0:	e92d4008 	push	{r3, lr}
 5c4:	e1a02000 	mov	r2, r0
 5c8:	e1a03000 	mov	r3, r0
 5cc:	eb00000e 	bl	60c <__register_exitproc>
 5d0:	e8bd4008 	pop	{r3, lr}
 5d4:	e12fff1e 	bx	lr

000005d8 <exit>:
 5d8:	e92d4008 	push	{r3, lr}
 5dc:	e3a01000 	mov	r1, #0
 5e0:	e1a04000 	mov	r4, r0
 5e4:	eb000045 	bl	700 <__call_exitprocs>
 5e8:	e59f3018 	ldr	r3, [pc, #24]	; 608 <exit+0x30>
 5ec:	e5930000 	ldr	r0, [r3]
 5f0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 5f4:	e3530000 	cmp	r3, #0
 5f8:	11a0e00f 	movne	lr, pc
 5fc:	112fff13 	bxne	r3
 600:	e1a00004 	mov	r0, r4
 604:	eb0000c9 	bl	930 <_exit>
 608:	000009f0 	.word	0x000009f0

0000060c <__register_exitproc>:
 60c:	e59fc0e4 	ldr	r12, [pc, #228]	; 6f8 <__register_exitproc+0xec>
 610:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 614:	e59c4000 	ldr	r4, [r12]
 618:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 61c:	e35c0000 	cmp	r12, #0
 620:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 624:	e59c5004 	ldr	r5, [r12, #4]
 628:	0584c148 	streq	r12, [r4, #328]	; 0x148
 62c:	e355001f 	cmp	r5, #31
 630:	e24dd010 	sub	sp, sp, #16
 634:	e1a06000 	mov	r6, r0
 638:	da000015 	ble	694 <__register_exitproc+0x88>
 63c:	e59f00b8 	ldr	r0, [pc, #184]	; 6fc <__register_exitproc+0xf0>
 640:	e3500000 	cmp	r0, #0
 644:	1a000001 	bne	650 <__register_exitproc+0x44>
 648:	e3e00000 	mvn	r0, #0
 64c:	ea000018 	b	6b4 <__register_exitproc+0xa8>
 650:	e3a00e19 	mov	r0, #400	; 0x190
 654:	e58d100c 	str	r1, [sp, #12]
 658:	e58d2008 	str	r2, [sp, #8]
 65c:	e58d3004 	str	r3, [sp, #4]
 660:	e320f000 	nop	{0}
 664:	e250c000 	subs	r12, r0, #0
 668:	e59d100c 	ldr	r1, [sp, #12]
 66c:	e59d2008 	ldr	r2, [sp, #8]
 670:	e59d3004 	ldr	r3, [sp, #4]
 674:	0afffff3 	beq	648 <__register_exitproc+0x3c>
 678:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 67c:	e3a00000 	mov	r0, #0
 680:	e58c0004 	str	r0, [r12, #4]
 684:	e58c5000 	str	r5, [r12]
 688:	e584c148 	str	r12, [r4, #328]	; 0x148
 68c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 690:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 694:	e3560000 	cmp	r6, #0
 698:	e59c4004 	ldr	r4, [r12, #4]
 69c:	1a000007 	bne	6c0 <__register_exitproc+0xb4>
 6a0:	e2843002 	add	r3, r4, #2
 6a4:	e2844001 	add	r4, r4, #1
 6a8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 6ac:	e58c4004 	str	r4, [r12, #4]
 6b0:	e3a00000 	mov	r0, #0
 6b4:	e28dd010 	add	sp, sp, #16
 6b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 6bc:	e12fff1e 	bx	lr
 6c0:	e3a00001 	mov	r0, #1
 6c4:	e1a00410 	lsl	r0, r0, r4
 6c8:	e08c8104 	add	r8, r12, r4, lsl #2
 6cc:	e3560002 	cmp	r6, #2
 6d0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 6d4:	e5883108 	str	r3, [r8, #264]	; 0x108
 6d8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 6dc:	e1877000 	orr	r7, r7, r0
 6e0:	01830000 	orreq	r0, r3, r0
 6e4:	e1a05008 	mov	r5, r8
 6e8:	e5882088 	str	r2, [r8, #136]	; 0x88
 6ec:	e58c7188 	str	r7, [r12, #392]	; 0x188
 6f0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 6f4:	eaffffe9 	b	6a0 <__register_exitproc+0x94>
 6f8:	000009f0 	.word	0x000009f0
 6fc:	00000000 	.word	0x00000000

00000700 <__call_exitprocs>:
 700:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 704:	e59f3168 	ldr	r3, [pc, #360]	; 874 <__call_exitprocs+0x174>
 708:	e5933000 	ldr	r3, [r3]
 70c:	e24dd014 	sub	sp, sp, #20
 710:	e58d3004 	str	r3, [sp, #4]
 714:	e2833f52 	add	r3, r3, #328	; 0x148
 718:	e58d0008 	str	r0, [sp, #8]
 71c:	e58d300c 	str	r3, [sp, #12]
 720:	e1a07001 	mov	r7, r1
 724:	e3a08001 	mov	r8, #1
 728:	e59d3004 	ldr	r3, [sp, #4]
 72c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 730:	e3560000 	cmp	r6, #0
 734:	e59db00c 	ldr	r11, [sp, #12]
 738:	0a000033 	beq	80c <__call_exitprocs+0x10c>
 73c:	e5965004 	ldr	r5, [r6, #4]
 740:	e2554001 	subs	r4, r5, #1
 744:	5286a088 	addpl	r10, r6, #136	; 0x88
 748:	5285501f 	addpl	r5, r5, #31
 74c:	508a5105 	addpl	r5, r10, r5, lsl #2
 750:	5a000007 	bpl	774 <__call_exitprocs+0x74>
 754:	ea000029 	b	800 <__call_exitprocs+0x100>
 758:	e5953000 	ldr	r3, [r5]
 75c:	e1530007 	cmp	r3, r7
 760:	0a000005 	beq	77c <__call_exitprocs+0x7c>
 764:	e2444001 	sub	r4, r4, #1
 768:	e3740001 	cmn	r4, #1
 76c:	e2455004 	sub	r5, r5, #4
 770:	0a000022 	beq	800 <__call_exitprocs+0x100>
 774:	e3570000 	cmp	r7, #0
 778:	1afffff6 	bne	758 <__call_exitprocs+0x58>
 77c:	e5963004 	ldr	r3, [r6, #4]
 780:	e06a2005 	rsb	r2, r10, r5
 784:	e2433001 	sub	r3, r3, #1
 788:	e0862002 	add	r2, r6, r2
 78c:	e1530004 	cmp	r3, r4
 790:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 794:	13a01000 	movne	r1, #0
 798:	05864004 	streq	r4, [r6, #4]
 79c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 7a0:	e3530000 	cmp	r3, #0
 7a4:	0affffee 	beq	764 <__call_exitprocs+0x64>
 7a8:	e1a02418 	lsl	r2, r8, r4
 7ac:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 7b0:	e1120001 	tst	r2, r1
 7b4:	e5969004 	ldr	r9, [r6, #4]
 7b8:	0a000016 	beq	818 <__call_exitprocs+0x118>
 7bc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 7c0:	e1120001 	tst	r2, r1
 7c4:	1a000016 	bne	824 <__call_exitprocs+0x124>
 7c8:	e59d0008 	ldr	r0, [sp, #8]
 7cc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 7d0:	e1a0e00f 	mov	lr, pc
 7d4:	e12fff13 	bx	r3
 7d8:	e5963004 	ldr	r3, [r6, #4]
 7dc:	e1530009 	cmp	r3, r9
 7e0:	1affffd0 	bne	728 <__call_exitprocs+0x28>
 7e4:	e59b3000 	ldr	r3, [r11]
 7e8:	e1530006 	cmp	r3, r6
 7ec:	1affffcd 	bne	728 <__call_exitprocs+0x28>
 7f0:	e2444001 	sub	r4, r4, #1
 7f4:	e3740001 	cmn	r4, #1
 7f8:	e2455004 	sub	r5, r5, #4
 7fc:	1affffdc 	bne	774 <__call_exitprocs+0x74>
 800:	e59f1070 	ldr	r1, [pc, #112]	; 878 <__call_exitprocs+0x178>
 804:	e3510000 	cmp	r1, #0
 808:	1a000009 	bne	834 <__call_exitprocs+0x134>
 80c:	e28dd014 	add	sp, sp, #20
 810:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 814:	e12fff1e 	bx	lr
 818:	e1a0e00f 	mov	lr, pc
 81c:	e12fff13 	bx	r3
 820:	eaffffec 	b	7d8 <__call_exitprocs+0xd8>
 824:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 828:	e1a0e00f 	mov	lr, pc
 82c:	e12fff13 	bx	r3
 830:	eaffffe8 	b	7d8 <__call_exitprocs+0xd8>
 834:	e5963004 	ldr	r3, [r6, #4]
 838:	e3530000 	cmp	r3, #0
 83c:	e5963000 	ldr	r3, [r6]
 840:	1a000008 	bne	868 <__call_exitprocs+0x168>
 844:	e3530000 	cmp	r3, #0
 848:	0a000006 	beq	868 <__call_exitprocs+0x168>
 84c:	e1a00006 	mov	r0, r6
 850:	e58b3000 	str	r3, [r11]
 854:	e320f000 	nop	{0}
 858:	e59b6000 	ldr	r6, [r11]
 85c:	e3560000 	cmp	r6, #0
 860:	1affffb5 	bne	73c <__call_exitprocs+0x3c>
 864:	eaffffe8 	b	80c <__call_exitprocs+0x10c>
 868:	e1a0b006 	mov	r11, r6
 86c:	e1a06003 	mov	r6, r3
 870:	eafffff9 	b	85c <__call_exitprocs+0x15c>
 874:	000009f0 	.word	0x000009f0
 878:	00000000 	.word	0x00000000

0000087c <register_fini>:
 87c:	e92d4008 	push	{r3, lr}
 880:	e59f3010 	ldr	r3, [pc, #16]	; 898 <register_fini+0x1c>
 884:	e3530000 	cmp	r3, #0
 888:	159f000c 	ldrne	r0, [pc, #12]	; 89c <register_fini+0x20>
 88c:	1bffff49 	blne	5b8 <atexit>
 890:	e8bd4008 	pop	{r3, lr}
 894:	e12fff1e 	bx	lr
 898:	00000a18 	.word	0x00000a18
 89c:	000008a0 	.word	0x000008a0

000008a0 <__libc_fini_array>:
 8a0:	e92d4038 	push	{r3, r4, r5, lr}
 8a4:	e59f5030 	ldr	r5, [pc, #48]	; 8dc <__libc_fini_array+0x3c>
 8a8:	e59f4030 	ldr	r4, [pc, #48]	; 8e0 <__libc_fini_array+0x40>
 8ac:	e0654004 	rsb	r4, r5, r4
 8b0:	e1b04144 	asrs	r4, r4, #2
 8b4:	10855104 	addne	r5, r5, r4, lsl #2
 8b8:	0a000004 	beq	8d0 <__libc_fini_array+0x30>
 8bc:	e5353004 	ldr	r3, [r5, #-4]!
 8c0:	e1a0e00f 	mov	lr, pc
 8c4:	e12fff13 	bx	r3
 8c8:	e2544001 	subs	r4, r4, #1
 8cc:	1afffffa 	bne	8bc <__libc_fini_array+0x1c>
 8d0:	eb000050 	bl	a18 <__libc_fini>
 8d4:	e8bd4038 	pop	{r3, r4, r5, lr}
 8d8:	e12fff1e 	bx	lr
 8dc:	00000a30 	.word	0x00000a30
 8e0:	00000a34 	.word	0x00000a34

000008e4 <__cs3_premain>:
 8e4:	e92d4008 	push	{r3, lr}
 8e8:	eb00001d 	bl	964 <__libc_init_array>
 8ec:	e59f3030 	ldr	r3, [pc, #48]	; 924 <__cs3_premain+0x40>
 8f0:	e3530000 	cmp	r3, #0
 8f4:	15930000 	ldrne	r0, [r3]
 8f8:	01a00003 	moveq	r0, r3
 8fc:	e59f3024 	ldr	r3, [pc, #36]	; 928 <__cs3_premain+0x44>
 900:	e3530000 	cmp	r3, #0
 904:	15931000 	ldrne	r1, [r3]
 908:	01a01003 	moveq	r1, r3
 90c:	e3a02000 	mov	r2, #0
 910:	ebfffec1 	bl	41c <main>
 914:	e59f3010 	ldr	r3, [pc, #16]	; 92c <__cs3_premain+0x48>
 918:	e3530000 	cmp	r3, #0
 91c:	1bffff2d 	blne	5d8 <exit>
 920:	eafffffe 	b	920 <__cs3_premain+0x3c>
	...
 92c:	000005d8 	.word	0x000005d8

00000930 <_exit>:
 930:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 934:	e3a00018 	mov	r0, #24
 938:	e59f1004 	ldr	r1, [pc, #4]	; 944 <_exit+0x14>
 93c:	ef123456 	svc	0x00123456
 940:	eafffffe 	b	940 <_exit+0x10>
 944:	00020026 	.word	0x00020026

00000948 <__cs3_isr_interrupt>:
 948:	eafffffe 	b	948 <__cs3_isr_interrupt>

0000094c <__cs3_isr_undef>:
 94c:	eafffffe 	b	94c <__cs3_isr_undef>

00000950 <__cs3_isr_swi>:
 950:	eafffffe 	b	950 <__cs3_isr_swi>

00000954 <__cs3_isr_pabort>:
 954:	eafffffe 	b	954 <__cs3_isr_pabort>

00000958 <__cs3_isr_dabort>:
 958:	eafffffe 	b	958 <__cs3_isr_dabort>

0000095c <__cs3_isr_irq>:
 95c:	eafffffe 	b	95c <__cs3_isr_irq>

00000960 <__cs3_isr_fiq>:
 960:	eafffffe 	b	960 <__cs3_isr_fiq>

00000964 <__libc_init_array>:
 964:	e92d4070 	push	{r4, r5, r6, lr}
 968:	e59f506c 	ldr	r5, [pc, #108]	; 9dc <__libc_init_array+0x78>
 96c:	e59f606c 	ldr	r6, [pc, #108]	; 9e0 <__libc_init_array+0x7c>
 970:	e0656006 	rsb	r6, r5, r6
 974:	e1b06146 	asrs	r6, r6, #2
 978:	12455004 	subne	r5, r5, #4
 97c:	13a04000 	movne	r4, #0
 980:	0a000005 	beq	99c <__libc_init_array+0x38>
 984:	e5b53004 	ldr	r3, [r5, #4]!
 988:	e2844001 	add	r4, r4, #1
 98c:	e1a0e00f 	mov	lr, pc
 990:	e12fff13 	bx	r3
 994:	e1560004 	cmp	r6, r4
 998:	1afffff9 	bne	984 <__libc_init_array+0x20>
 99c:	e59f5040 	ldr	r5, [pc, #64]	; 9e4 <__libc_init_array+0x80>
 9a0:	e59f6040 	ldr	r6, [pc, #64]	; 9e8 <__libc_init_array+0x84>
 9a4:	e0656006 	rsb	r6, r5, r6
 9a8:	eb000012 	bl	9f8 <_init>
 9ac:	e1b06146 	asrs	r6, r6, #2
 9b0:	12455004 	subne	r5, r5, #4
 9b4:	13a04000 	movne	r4, #0
 9b8:	0a000005 	beq	9d4 <__libc_init_array+0x70>
 9bc:	e5b53004 	ldr	r3, [r5, #4]!
 9c0:	e2844001 	add	r4, r4, #1
 9c4:	e1a0e00f 	mov	lr, pc
 9c8:	e12fff13 	bx	r3
 9cc:	e1560004 	cmp	r6, r4
 9d0:	1afffff9 	bne	9bc <__libc_init_array+0x58>
 9d4:	e8bd4070 	pop	{r4, r5, r6, lr}
 9d8:	e12fff1e 	bx	lr
 9dc:	00000a10 	.word	0x00000a10
 9e0:	00000a10 	.word	0x00000a10
 9e4:	00000a10 	.word	0x00000a10
 9e8:	00000a18 	.word	0x00000a18

Disassembly of section .rodata:

000009f0 <_global_impure_ptr>:
 9f0:	00000a58 00000043                       X...C...

000009f8 <_init>:
 9f8:	e1a0c00d 	mov	r12, sp
 9fc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a00:	e24cb004 	sub	r11, r12, #4
 a04:	e24bd028 	sub	sp, r11, #40	; 0x28
 a08:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a0c:	e12fff1e 	bx	lr

00000a10 <__init_array_start>:
 a10:	0000087c 	.word	0x0000087c

00000a14 <__frame_dummy_init_array_entry>:
 a14:	00000208                                ....

00000a18 <__libc_fini>:
 a18:	e1a0c00d 	mov	r12, sp
 a1c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a20:	e24cb004 	sub	r11, r12, #4
 a24:	e24bd028 	sub	sp, r11, #40	; 0x28
 a28:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a2c:	e12fff1e 	bx	lr

00000a30 <__fini_array_start>:
 a30:	000001c4 	.word	0x000001c4

00000a34 <__cs3_regions>:
 a34:	00000000 	.word	0x00000000
 a38:	00000040 	.word	0x00000040
 a3c:	00000040 	.word	0x00000040
 a40:	00000e48 	.word	0x00000e48
 a44:	00000020 	.word	0x00000020
