
//campus.mcgill.ca/emf/CPE/yjing4/Desktop/ecse324 -lab5/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	68 1a 00 00 74 1a 00 00 80 1a 00 00 8c 1a 00 00     h...t...........
  30:	98 1a 00 00 08 2a 00 00 10 19 00 00 a4 1a 00 00     .....*..........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000a32 	bl	29a4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002afc 	.word	0x00002afc

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031d40 	.word	0x00031d40

00000124 <__cs3_heap_start_ptr>:
     124:	001a9768 	.word	0x001a9768

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031d48 	.word	0x00031d48
     170:	00031d4b 	.word	0x00031d4b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031d48 	.word	0x00031d48
     1bc:	00031d48 	.word	0x00031d48
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031d48 	.word	0x00031d48
     200:	00000000 	.word	0x00000000
     204:	00002a94 	.word	0x00002a94

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002a94 	.word	0x00002a94
     250:	00031d4c 	.word	0x00031d4c
     254:	00002b00 	.word	0x00002b00
     258:	00000000 	.word	0x00000000

0000025c <signal>:


		int amp = 5;				//initial volume

//Method calculating the signal
	int signal(float f, int t) {
     25c:	e92d4810 	push	{r4, r11, lr}
     260:	e28db008 	add	r11, sp, #8
     264:	e24dd024 	sub	sp, sp, #36	; 0x24
     268:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
     26c:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4
		int temp = (int)(f*t);
     270:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     274:	eb0007f3 	bl	2248 <__aeabi_i2f>
     278:	e1a03000 	mov	r3, r0
     27c:	e1a00003 	mov	r0, r3
     280:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
     284:	eb000826 	bl	2324 <__aeabi_fmul>
     288:	e1a03000 	mov	r3, r0
     28c:	e1a00003 	mov	r0, r3
     290:	eb0008e1 	bl	261c <__aeabi_f2iz>
     294:	e1a03000 	mov	r3, r0
     298:	e50b3010 	str	r3, [r11, #-16]
		float index = temp % 48000;
     29c:	e51b2010 	ldr	r2, [r11, #-16]
     2a0:	e30139f1 	movw	r3, #6641	; 0x19f1
     2a4:	e3403576 	movt	r3, #1398	; 0x576
     2a8:	e0c31293 	smull	r1, r3, r3, r2
     2ac:	e1a01543 	asr	r1, r3, #10
     2b0:	e1a03fc2 	asr	r3, r2, #31
     2b4:	e0633001 	rsb	r3, r3, r1
     2b8:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2bc:	e0030391 	mul	r3, r1, r3
     2c0:	e0633002 	rsb	r3, r3, r2
     2c4:	e1a00003 	mov	r0, r3
     2c8:	eb0007de 	bl	2248 <__aeabi_i2f>
     2cc:	e1a03000 	mov	r3, r0
     2d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		int indexLeftOfDecimal = (int)index;
     2d4:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     2d8:	eb0008cf 	bl	261c <__aeabi_f2iz>
     2dc:	e1a03000 	mov	r3, r0
     2e0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		float decimals = index - indexLeftOfDecimal;
     2e4:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     2e8:	eb0007d6 	bl	2248 <__aeabi_i2f>
     2ec:	e1a03000 	mov	r3, r0
     2f0:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     2f4:	e1a01003 	mov	r1, r3
     2f8:	eb000760 	bl	2080 <__aeabi_fsub>
     2fc:	e1a03000 	mov	r3, r0
     300:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		float interpolated = (1-decimals)*sine[indexLeftOfDecimal] + (decimals)*sine[indexLeftOfDecimal+1];
     304:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     308:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     30c:	eb00075b 	bl	2080 <__aeabi_fsub>
     310:	e1a03000 	mov	r3, r0
     314:	e1a04003 	mov	r4, r3
     318:	e3023b0c 	movw	r3, #11020	; 0x2b0c
     31c:	e3403000 	movt	r3, #0
     320:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     324:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     328:	e1a00003 	mov	r0, r3
     32c:	eb0007c5 	bl	2248 <__aeabi_i2f>
     330:	e1a03000 	mov	r3, r0
     334:	e1a00004 	mov	r0, r4
     338:	e1a01003 	mov	r1, r3
     33c:	eb0007f8 	bl	2324 <__aeabi_fmul>
     340:	e1a03000 	mov	r3, r0
     344:	e1a04003 	mov	r4, r3
     348:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     34c:	e2832001 	add	r2, r3, #1
     350:	e3023b0c 	movw	r3, #11020	; 0x2b0c
     354:	e3403000 	movt	r3, #0
     358:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     35c:	e1a00003 	mov	r0, r3
     360:	eb0007b8 	bl	2248 <__aeabi_i2f>
     364:	e1a03000 	mov	r3, r0
     368:	e1a00003 	mov	r0, r3
     36c:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     370:	eb0007eb 	bl	2324 <__aeabi_fmul>
     374:	e1a03000 	mov	r3, r0
     378:	e1a00004 	mov	r0, r4
     37c:	e1a01003 	mov	r1, r3
     380:	eb00073f 	bl	2084 <__addsf3>
     384:	e1a03000 	mov	r3, r0
     388:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	

		return interpolated;
     38c:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
     390:	eb0008a1 	bl	261c <__aeabi_f2iz>
     394:	e1a03000 	mov	r3, r0
	}
     398:	e1a00003 	mov	r0, r3
     39c:	e24bd008 	sub	sp, r11, #8
     3a0:	e8bd8810 	pop	{r4, r11, pc}

000003a4 <makewave>:
		int noteG1[48000];
		int noteA1[48000];
		int noteB1[48000];
		int noteCC1[48000];

		void makewave(){
     3a4:	e92d4800 	push	{r11, lr}
     3a8:	e28db004 	add	r11, sp, #4
     3ac:	e24dd008 	sub	sp, sp, #8
			int t=0;	
     3b0:	e3a03000 	mov	r3, #0
     3b4:	e50b3008 	str	r3, [r11, #-8]
			while (t<48000){
     3b8:	ea00004a 	b	4e8 <makewave+0x144>
				noteC1[t]=signal(130.813,t);
     3bc:	e30d0021 	movw	r0, #53281	; 0xd021
     3c0:	e3440302 	movt	r0, #17154	; 0x4302
     3c4:	e51b1008 	ldr	r1, [r11, #-8]
     3c8:	ebffffa3 	bl	25c <signal>
     3cc:	e1a01000 	mov	r1, r0
     3d0:	e3023764 	movw	r3, #10084	; 0x2764
     3d4:	e3403003 	movt	r3, #3
     3d8:	e51b2008 	ldr	r2, [r11, #-8]
     3dc:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteD1[t]=signal(146.832,t);
     3e0:	e30d04fe 	movw	r0, #54526	; 0xd4fe
     3e4:	e3440312 	movt	r0, #17170	; 0x4312
     3e8:	e51b1008 	ldr	r1, [r11, #-8]
     3ec:	ebffff9a 	bl	25c <signal>
     3f0:	e1a01000 	mov	r1, r0
     3f4:	e3013564 	movw	r3, #5476	; 0x1564
     3f8:	e3403006 	movt	r3, #6
     3fc:	e51b2008 	ldr	r2, [r11, #-8]
     400:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteE1[t]=signal(164.814,t);
     404:	e30d0062 	movw	r0, #53346	; 0xd062
     408:	e3440324 	movt	r0, #17188	; 0x4324
     40c:	e51b1008 	ldr	r1, [r11, #-8]
     410:	ebffff91 	bl	25c <signal>
     414:	e1a01000 	mov	r1, r0
     418:	e3003364 	movw	r3, #868	; 0x364
     41c:	e3403009 	movt	r3, #9
     420:	e51b2008 	ldr	r2, [r11, #-8]
     424:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteF1[t]=signal(174.614,t);
     428:	e3090d2f 	movw	r0, #40239	; 0x9d2f
     42c:	e344032e 	movt	r0, #17198	; 0x432e
     430:	e51b1008 	ldr	r1, [r11, #-8]
     434:	ebffff88 	bl	25c <signal>
     438:	e1a01000 	mov	r1, r0
     43c:	e30f3164 	movw	r3, #61796	; 0xf164
     440:	e340300b 	movt	r3, #11
     444:	e51b2008 	ldr	r2, [r11, #-8]
     448:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteG1[t]=signal(195.998,t);
     44c:	e30f0f7d 	movw	r0, #65405	; 0xff7d
     450:	e3440343 	movt	r0, #17219	; 0x4343
     454:	e51b1008 	ldr	r1, [r11, #-8]
     458:	ebffff7f 	bl	25c <signal>
     45c:	e1a01000 	mov	r1, r0
     460:	e30d3f64 	movw	r3, #57188	; 0xdf64
     464:	e340300e 	movt	r3, #14
     468:	e51b2008 	ldr	r2, [r11, #-8]
     46c:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteA1[t]=signal(220.000,t);
     470:	e3a00000 	mov	r0, #0
     474:	e344035c 	movt	r0, #17244	; 0x435c
     478:	e51b1008 	ldr	r1, [r11, #-8]
     47c:	ebffff76 	bl	25c <signal>
     480:	e1a01000 	mov	r1, r0
     484:	e30c3d64 	movw	r3, #52580	; 0xcd64
     488:	e3403011 	movt	r3, #17
     48c:	e51b2008 	ldr	r2, [r11, #-8]
     490:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteB1[t]=signal(246.942,t);
     494:	e30f0127 	movw	r0, #61735	; 0xf127
     498:	e3440376 	movt	r0, #17270	; 0x4376
     49c:	e51b1008 	ldr	r1, [r11, #-8]
     4a0:	ebffff6d 	bl	25c <signal>
     4a4:	e1a01000 	mov	r1, r0
     4a8:	e30b3b64 	movw	r3, #47972	; 0xbb64
     4ac:	e3403014 	movt	r3, #20
     4b0:	e51b2008 	ldr	r2, [r11, #-8]
     4b4:	e7831102 	str	r1, [r3, r2, lsl #2]
				noteCC1[t]=signal(261.626,t);
     4b8:	e30d0021 	movw	r0, #53281	; 0xd021
     4bc:	e3440382 	movt	r0, #17282	; 0x4382
     4c0:	e51b1008 	ldr	r1, [r11, #-8]
     4c4:	ebffff64 	bl	25c <signal>
     4c8:	e1a01000 	mov	r1, r0
     4cc:	e30a3964 	movw	r3, #43364	; 0xa964
     4d0:	e3403017 	movt	r3, #23
     4d4:	e51b2008 	ldr	r2, [r11, #-8]
     4d8:	e7831102 	str	r1, [r3, r2, lsl #2]
				t++;
     4dc:	e51b3008 	ldr	r3, [r11, #-8]
     4e0:	e2833001 	add	r3, r3, #1
     4e4:	e50b3008 	str	r3, [r11, #-8]
		int noteB1[48000];
		int noteCC1[48000];

		void makewave(){
			int t=0;	
			while (t<48000){
     4e8:	e51b2008 	ldr	r2, [r11, #-8]
     4ec:	e30b3b7f 	movw	r3, #47999	; 0xbb7f
     4f0:	e1520003 	cmp	r2, r3
     4f4:	daffffb0 	ble	3bc <makewave+0x18>
				noteG1[t]=signal(195.998,t);
				noteA1[t]=signal(220.000,t);
				noteB1[t]=signal(246.942,t);
				noteCC1[t]=signal(261.626,t);
				t++;
			}t=0;
     4f8:	e3a03000 	mov	r3, #0
     4fc:	e50b3008 	str	r3, [r11, #-8]
		}
     500:	e24bd004 	sub	sp, r11, #4
     504:	e8bd8800 	pop	{r11, pc}

00000508 <main>:
	


int main(){
     508:	e92d4800 	push	{r11, lr}
     50c:	e28db004 	add	r11, sp, #4
     510:	e24dd0b8 	sub	sp, sp, #184	; 0xb8
		int_setup(3, (int []) {199, 200, 201});
     514:	e3023a98 	movw	r3, #10904	; 0x2a98
     518:	e3403000 	movt	r3, #0
     51c:	e24bc070 	sub	r12, r11, #112	; 0x70
     520:	e8930007 	ldm	r3, {r0, r1, r2}
     524:	e88c0007 	stm	r12, {r0, r1, r2}
     528:	e24b3070 	sub	r3, r11, #112	; 0x70
     52c:	e3a00003 	mov	r0, #3
     530:	e1a01003 	mov	r1, r3
     534:	eb000569 	bl	1ae0 <int_setup>

		VGA_clear_pixelbuff_ASM();				//clear the screen at first
     538:	eb000435 	bl	1614 <VGA_clear_pixelbuff_ASM>

//Initialize audio timer parameters
		HPS_TIM_config_t hps_tim;
		hps_tim.tim = TIM0;
     53c:	e3a03001 	mov	r3, #1
     540:	e54b3088 	strb	r3, [r11, #-136]	; 0xffffff78
		hps_tim.timeout = 20;
     544:	e3a03014 	mov	r3, #20
     548:	e50b3084 	str	r3, [r11, #-132]	; 0xffffff7c
		hps_tim.LD_en = 1;
     54c:	e3a03001 	mov	r3, #1
     550:	e50b3080 	str	r3, [r11, #-128]	; 0xffffff80
		hps_tim.INT_en = 1;
     554:	e3a03001 	mov	r3, #1
     558:	e50b307c 	str	r3, [r11, #-124]	; 0xffffff84
		hps_tim.enable = 1;
     55c:	e3a03001 	mov	r3, #1
     560:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88

		HPS_TIM_config_ASM(&hps_tim);		//Config timer
     564:	e24b3088 	sub	r3, r11, #136	; 0x88
     568:	e1a00003 	mov	r0, r3
     56c:	eb00027b 	bl	f60 <HPS_TIM_config_ASM>

//keyboard timer
		HPS_TIM_config_t hps_tim1;
		hps_tim1.tim = TIM1;
     570:	e3a03002 	mov	r3, #2
     574:	e54b30a0 	strb	r3, [r11, #-160]	; 0xffffff60
		hps_tim1.timeout = 1000;
     578:	e3a03ffa 	mov	r3, #1000	; 0x3e8
     57c:	e50b309c 	str	r3, [r11, #-156]	; 0xffffff64
		//hps_tim1.timeout = 50000;
		hps_tim1.LD_en = 1;
     580:	e3a03001 	mov	r3, #1
     584:	e50b3098 	str	r3, [r11, #-152]	; 0xffffff68
		hps_tim1.INT_en = 1;
     588:	e3a03001 	mov	r3, #1
     58c:	e50b3094 	str	r3, [r11, #-148]	; 0xffffff6c
		hps_tim1.enable = 1;
     590:	e3a03001 	mov	r3, #1
     594:	e50b3090 	str	r3, [r11, #-144]	; 0xffffff70

		HPS_TIM_config_ASM(&hps_tim1);		//Config timer
     598:	e24b30a0 	sub	r3, r11, #160	; 0xa0
     59c:	e1a00003 	mov	r0, r3
     5a0:	eb00026e 	bl	f60 <HPS_TIM_config_ASM>

//VGA timer
		HPS_TIM_config_t hps_tim2;
		hps_tim2.tim = TIM2;
     5a4:	e3a03004 	mov	r3, #4
     5a8:	e54b30b8 	strb	r3, [r11, #-184]	; 0xffffff48
		hps_tim2.timeout = 100000;
     5ac:	e30836a0 	movw	r3, #34464	; 0x86a0
     5b0:	e3403001 	movt	r3, #1
     5b4:	e50b30b4 	str	r3, [r11, #-180]	; 0xffffff4c
		//hps_tim2.timeout = 50000;
		hps_tim2.LD_en = 1;
     5b8:	e3a03001 	mov	r3, #1
     5bc:	e50b30b0 	str	r3, [r11, #-176]	; 0xffffff50
		hps_tim2.INT_en = 1;
     5c0:	e3a03001 	mov	r3, #1
     5c4:	e50b30ac 	str	r3, [r11, #-172]	; 0xffffff54
		hps_tim2.enable = 1;
     5c8:	e3a03001 	mov	r3, #1
     5cc:	e50b30a8 	str	r3, [r11, #-168]	; 0xffffff58

		HPS_TIM_config_ASM(&hps_tim2);		//Config timer
     5d0:	e24b30b8 	sub	r3, r11, #184	; 0xb8
     5d4:	e1a00003 	mov	r0, r3
     5d8:	eb000260 	bl	f60 <HPS_TIM_config_ASM>

		makewave();
     5dc:	ebffff70 	bl	3a4 <makewave>

		char* data;				// PS/2 port input address
		float f = 0;			//unused
     5e0:	e3a03000 	mov	r3, #0
     5e4:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0

		int t0 = 0;				//8 counters for stop points of each audio signal
     5e8:	e3a03000 	mov	r3, #0
     5ec:	e50b3008 	str	r3, [r11, #-8]
		int t1 = 0;
     5f0:	e3a03000 	mov	r3, #0
     5f4:	e50b300c 	str	r3, [r11, #-12]
		int t2 = 0;
     5f8:	e3a03000 	mov	r3, #0
     5fc:	e50b3010 	str	r3, [r11, #-16]
		int t3 = 0;
     600:	e3a03000 	mov	r3, #0
     604:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		int t4 = 0;
     608:	e3a03000 	mov	r3, #0
     60c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		int t5 = 0;
     610:	e3a03000 	mov	r3, #0
     614:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		int t6 = 0;
     618:	e3a03000 	mov	r3, #0
     61c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
		int t7 = 0;
     620:	e3a03000 	mov	r3, #0
     624:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
		
		int i = 0;				//counter for saving the to-be-drawed points in array on vga
     628:	e3a03000 	mov	r3, #0
     62c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
		int j;					//counter for acturally drawing points on vga
		int flag = 0;			//flag for readyness of complete 320 points
     630:	e3a03000 	mov	r3, #0
     634:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		int fflag = 0;			//some hard code here
     638:	e3a03000 	mov	r3, #0
     63c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

		int s = 0;				//initialize signal value
     640:	e3a03000 	mov	r3, #0
     644:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		int noteC =0;			//flag for 8 different frequencies
     648:	e3a03000 	mov	r3, #0
     64c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
		int noteD =0;
     650:	e3a03000 	mov	r3, #0
     654:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
		int noteE =0;
     658:	e3a03000 	mov	r3, #0
     65c:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
		int noteF =0;
     660:	e3a03000 	mov	r3, #0
     664:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
		int noteG =0;
     668:	e3a03000 	mov	r3, #0
     66c:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
		int noteA =0;
     670:	e3a03000 	mov	r3, #0
     674:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
		int noteB =0;
     678:	e3a03000 	mov	r3, #0
     67c:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
		int noteCC =0;
     680:	e3a03000 	mov	r3, #0
     684:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
     688:	ea000000 	b	690 <main+0x188>
		}


	}

}
     68c:	e1a00000 	nop			; (mov r0, r0)
		int noteB =0;
		int noteCC =0;


while(1){
	if(hps_tim1_int_flag){					//keyboard timer flag
     690:	e301308c 	movw	r3, #4236	; 0x108c
     694:	e3403000 	movt	r3, #0
     698:	e5933000 	ldr	r3, [r3]
     69c:	e3530000 	cmp	r3, #0
     6a0:	0a00008f 	beq	8e4 <ICDIPTR+0xe4>
		hps_tim1_int_flag = 0;				//reset timer flag
     6a4:	e301308c 	movw	r3, #4236	; 0x108c
     6a8:	e3403000 	movt	r3, #0
     6ac:	e3a02000 	mov	r2, #0
     6b0:	e5832000 	str	r2, [r3]

		int in = *data;						//assigning the input
     6b4:	e51b3064 	ldr	r3, [r11, #-100]	; 0xffffff9c
     6b8:	e5d33000 	ldrb	r3, [r3]
     6bc:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4

		if(read_ps2_data_ASM(data)){		//check if keyboard interrupt occurs
     6c0:	e51b0064 	ldr	r0, [r11, #-100]	; 0xffffff9c
     6c4:	eb000345 	bl	13e0 <read_ps2_data_ASM>
     6c8:	e1a03000 	mov	r3, r0
     6cc:	e3530000 	cmp	r3, #0
     6d0:	0a000083 	beq	8e4 <ICDIPTR+0xe4>

			if(in != 0xF0){					//if nothing is released
     6d4:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     6d8:	e35300f0 	cmp	r3, #240	; 0xf0
     6dc:	0a000050 	beq	824 <ICDIPTR+0x24>


			if(amp >= 12){					//setting the volume boundries
     6e0:	e3023b08 	movw	r3, #11016	; 0x2b08
     6e4:	e3403000 	movt	r3, #0
     6e8:	e5933000 	ldr	r3, [r3]
     6ec:	e353000b 	cmp	r3, #11
     6f0:	da000003 	ble	704 <main+0x1fc>
				amp = 12;
     6f4:	e3023b08 	movw	r3, #11016	; 0x2b08
     6f8:	e3403000 	movt	r3, #0
     6fc:	e3a0200c 	mov	r2, #12
     700:	e5832000 	str	r2, [r3]
			}
			if(amp <= 0){
     704:	e3023b08 	movw	r3, #11016	; 0x2b08
     708:	e3403000 	movt	r3, #0
     70c:	e5933000 	ldr	r3, [r3]
     710:	e3530000 	cmp	r3, #0
     714:	ca000003 	bgt	728 <main+0x220>
				amp = 0;
     718:	e3023b08 	movw	r3, #11016	; 0x2b08
     71c:	e3403000 	movt	r3, #0
     720:	e3a02000 	mov	r2, #0
     724:	e5832000 	str	r2, [r3]
			}



				 in = *data;
     728:	e51b3064 	ldr	r3, [r11, #-100]	; 0xffffff9c
     72c:	e5d33000 	ldrb	r3, [r3]
     730:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4

				 if( in == 0x1C){			//check which key is pressed and set corresponding flag to 1
     734:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     738:	e353001c 	cmp	r3, #28
     73c:	1a000001 	bne	748 <main+0x240>
					//f = 130.813;
				 	noteC=1;
     740:	e3a03001 	mov	r3, #1
     744:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
				 }if( in == 0x1B){
     748:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     74c:	e353001b 	cmp	r3, #27
     750:	1a000001 	bne	75c <main+0x254>
					//f = 146.832;
					noteD=1;
     754:	e3a03001 	mov	r3, #1
     758:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
				}if( in == 0x23){
     75c:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     760:	e3530023 	cmp	r3, #35	; 0x23
     764:	1a000001 	bne	770 <main+0x268>
					//f = 164.814;
					noteE=1;
     768:	e3a03001 	mov	r3, #1
     76c:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
				}if( in == 0x2B){
     770:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     774:	e353002b 	cmp	r3, #43	; 0x2b
     778:	1a000001 	bne	784 <main+0x27c>
					//f = 174.614;
					noteF=1;
     77c:	e3a03001 	mov	r3, #1
     780:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
				}if( in == 0x3B){
     784:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     788:	e353003b 	cmp	r3, #59	; 0x3b
     78c:	1a000001 	bne	798 <main+0x290>
					//f = 195.998;
					noteG=1;
     790:	e3a03001 	mov	r3, #1
     794:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
				}if( in == 0x42){
     798:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     79c:	e3530042 	cmp	r3, #66	; 0x42
     7a0:	1a000001 	bne	7ac <main+0x2a4>
					//f = 220.000;
					noteA=1;
     7a4:	e3a03001 	mov	r3, #1
     7a8:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
				}if( in == 0x4B){
     7ac:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     7b0:	e353004b 	cmp	r3, #75	; 0x4b
     7b4:	1a000001 	bne	7c0 <main+0x2b8>
					//f = 246.942;
					noteB=1;
     7b8:	e3a03001 	mov	r3, #1
     7bc:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
				}if( in == 0x4C){
     7c0:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     7c4:	e353004c 	cmp	r3, #76	; 0x4c
     7c8:	1a000001 	bne	7d4 <main+0x2cc>
					//f = 261.626;
					noteCC=1;
     7cc:	e3a03001 	mov	r3, #1
     7d0:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
				}if( in == 0x3A){
     7d4:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     7d8:	e353003a 	cmp	r3, #58	; 0x3a
     7dc:	1a000006 	bne	7fc <main+0x2f4>
					//M
					amp = amp+2;
     7e0:	e3023b08 	movw	r3, #11016	; 0x2b08
     7e4:	e3403000 	movt	r3, #0
     7e8:	e5933000 	ldr	r3, [r3]
     7ec:	e2832002 	add	r2, r3, #2
     7f0:	e3023b08 	movw	r3, #11016	; 0x2b08
     7f4:	e3403000 	movt	r3, #0
     7f8:	e5832000 	str	r2, [r3]
				}if( in == 0x31){
     7fc:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     800:	e3530031 	cmp	r3, #49	; 0x31
     804:	1a000006 	bne	824 <ICDIPTR+0x24>
					//N
					amp = amp-2;
     808:	e3023b08 	movw	r3, #11016	; 0x2b08
     80c:	e3403000 	movt	r3, #0
     810:	e5933000 	ldr	r3, [r3]
     814:	e2432002 	sub	r2, r3, #2
     818:	e3023b08 	movw	r3, #11016	; 0x2b08
     81c:	e3403000 	movt	r3, #0
     820:	e5832000 	str	r2, [r3]
				}
			}

			if(in == 0xF0){					//if any key is released
     824:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     828:	e35300f0 	cmp	r3, #240	; 0xf0
     82c:	1a00002c 	bne	8e4 <ICDIPTR+0xe4>

				read_ps2_data_ASM(data);	//reassigning the input to pass in the second breakcode
     830:	e51b0064 	ldr	r0, [r11, #-100]	; 0xffffff9c
     834:	eb0002e9 	bl	13e0 <read_ps2_data_ASM>
				in = *data;
     838:	e51b3064 	ldr	r3, [r11, #-100]	; 0xffffff9c
     83c:	e5d33000 	ldrb	r3, [r3]
     840:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4

 				if( in == 0x1C){			//check which key is released
     844:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     848:	e353001c 	cmp	r3, #28
     84c:	1a000001 	bne	858 <ICDIPTR+0x58>
					//f = 130.813;
					noteC=0;
     850:	e3a03000 	mov	r3, #0
     854:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4

				}if( in == 0x1B){
     858:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     85c:	e353001b 	cmp	r3, #27
     860:	1a000001 	bne	86c <ICDIPTR+0x6c>
					//f = 146.832;
					noteD=0;
     864:	e3a03000 	mov	r3, #0
     868:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0

				}if( in == 0x23){
     86c:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     870:	e3530023 	cmp	r3, #35	; 0x23
     874:	1a000001 	bne	880 <ICDIPTR+0x80>
					//f = 164.814;
					noteE=0;
     878:	e3a03000 	mov	r3, #0
     87c:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc

				}if( in == 0x2B){
     880:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     884:	e353002b 	cmp	r3, #43	; 0x2b
     888:	1a000001 	bne	894 <ICDIPTR+0x94>
					//f = 174.614;
					noteF=0;
     88c:	e3a03000 	mov	r3, #0
     890:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8

				}if( in == 0x3B){
     894:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     898:	e353003b 	cmp	r3, #59	; 0x3b
     89c:	1a000001 	bne	8a8 <ICDIPTR+0xa8>
					//f = 195.998;
					noteG=0;
     8a0:	e3a03000 	mov	r3, #0
     8a4:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4

				}if( in == 0x42){
     8a8:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     8ac:	e3530042 	cmp	r3, #66	; 0x42
     8b0:	1a000001 	bne	8bc <ICDIPTR+0xbc>
					//f = 220.000;
					noteA=0;
     8b4:	e3a03000 	mov	r3, #0
     8b8:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0

				}if( in == 0x4B){
     8bc:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     8c0:	e353004b 	cmp	r3, #75	; 0x4b
     8c4:	1a000001 	bne	8d0 <ICDIPTR+0xd0>
					//f = 246.942;
					noteB=0;
     8c8:	e3a03000 	mov	r3, #0
     8cc:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac

				}if( in == 0x4C){
     8d0:	e51b305c 	ldr	r3, [r11, #-92]	; 0xffffffa4
     8d4:	e353004c 	cmp	r3, #76	; 0x4c
     8d8:	1a000001 	bne	8e4 <ICDIPTR+0xe4>
					//f = 261.626;
					noteCC=0;
     8dc:	e3a03000 	mov	r3, #0
     8e0:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
				}
			}
		}
	}

	if(hps_tim0_int_flag){					//audio timer
     8e4:	e3013088 	movw	r3, #4232	; 0x1088
     8e8:	e3403000 	movt	r3, #0
     8ec:	e5933000 	ldr	r3, [r3]
     8f0:	e3530000 	cmp	r3, #0
     8f4:	0a000145 	beq	e10 <ICDICFR+0x210>
			hps_tim0_int_flag = 0;			//reset flag
     8f8:	e3013088 	movw	r3, #4232	; 0x1088
     8fc:	e3403000 	movt	r3, #0
     900:	e3a02000 	mov	r2, #0
     904:	e5832000 	str	r2, [r3]

		if(noteC){							//add signal corresponding to the pressed keys
     908:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     90c:	e3530000 	cmp	r3, #0
     910:	0a00000a 	beq	940 <ICDIPTR+0x140>
				s += amp * noteC1[t0];
     914:	e3023764 	movw	r3, #10084	; 0x2764
     918:	e3403003 	movt	r3, #3
     91c:	e51b2008 	ldr	r2, [r11, #-8]
     920:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     924:	e3023b08 	movw	r3, #11016	; 0x2b08
     928:	e3403000 	movt	r3, #0
     92c:	e5933000 	ldr	r3, [r3]
     930:	e0030293 	mul	r3, r3, r2
     934:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     938:	e0823003 	add	r3, r2, r3
     93c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteD){
     940:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
     944:	e3530000 	cmp	r3, #0
     948:	0a00000a 	beq	978 <ICDIPTR+0x178>
				s += amp * noteD1[t1];
     94c:	e3013564 	movw	r3, #5476	; 0x1564
     950:	e3403006 	movt	r3, #6
     954:	e51b200c 	ldr	r2, [r11, #-12]
     958:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     95c:	e3023b08 	movw	r3, #11016	; 0x2b08
     960:	e3403000 	movt	r3, #0
     964:	e5933000 	ldr	r3, [r3]
     968:	e0030293 	mul	r3, r3, r2
     96c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     970:	e0823003 	add	r3, r2, r3
     974:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteE){
     978:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
     97c:	e3530000 	cmp	r3, #0
     980:	0a00000a 	beq	9b0 <ICDIPTR+0x1b0>
				s += amp * noteE1[t2];
     984:	e3003364 	movw	r3, #868	; 0x364
     988:	e3403009 	movt	r3, #9
     98c:	e51b2010 	ldr	r2, [r11, #-16]
     990:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     994:	e3023b08 	movw	r3, #11016	; 0x2b08
     998:	e3403000 	movt	r3, #0
     99c:	e5933000 	ldr	r3, [r3]
     9a0:	e0030293 	mul	r3, r3, r2
     9a4:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     9a8:	e0823003 	add	r3, r2, r3
     9ac:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteF){
     9b0:	e51b3048 	ldr	r3, [r11, #-72]	; 0xffffffb8
     9b4:	e3530000 	cmp	r3, #0
     9b8:	0a00000a 	beq	9e8 <ICDIPTR+0x1e8>
				s += amp * noteF1[t3];
     9bc:	e30f3164 	movw	r3, #61796	; 0xf164
     9c0:	e340300b 	movt	r3, #11
     9c4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     9c8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     9cc:	e3023b08 	movw	r3, #11016	; 0x2b08
     9d0:	e3403000 	movt	r3, #0
     9d4:	e5933000 	ldr	r3, [r3]
     9d8:	e0030293 	mul	r3, r3, r2
     9dc:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     9e0:	e0823003 	add	r3, r2, r3
     9e4:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteG){
     9e8:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
     9ec:	e3530000 	cmp	r3, #0
     9f0:	0a00000a 	beq	a20 <ICDIPTR+0x220>
				s += amp * noteG1[t4];
     9f4:	e30d3f64 	movw	r3, #57188	; 0xdf64
     9f8:	e340300e 	movt	r3, #14
     9fc:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     a00:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     a04:	e3023b08 	movw	r3, #11016	; 0x2b08
     a08:	e3403000 	movt	r3, #0
     a0c:	e5933000 	ldr	r3, [r3]
     a10:	e0030293 	mul	r3, r3, r2
     a14:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     a18:	e0823003 	add	r3, r2, r3
     a1c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteA){
     a20:	e51b3050 	ldr	r3, [r11, #-80]	; 0xffffffb0
     a24:	e3530000 	cmp	r3, #0
     a28:	0a00000a 	beq	a58 <ICDIPTR+0x258>
				s += amp * noteA1[t5];
     a2c:	e30c3d64 	movw	r3, #52580	; 0xcd64
     a30:	e3403011 	movt	r3, #17
     a34:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     a38:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     a3c:	e3023b08 	movw	r3, #11016	; 0x2b08
     a40:	e3403000 	movt	r3, #0
     a44:	e5933000 	ldr	r3, [r3]
     a48:	e0030293 	mul	r3, r3, r2
     a4c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     a50:	e0823003 	add	r3, r2, r3
     a54:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteB){
     a58:	e51b3054 	ldr	r3, [r11, #-84]	; 0xffffffac
     a5c:	e3530000 	cmp	r3, #0
     a60:	0a00000a 	beq	a90 <ICDIPTR+0x290>
				s += amp * noteB1[t6];
     a64:	e30b3b64 	movw	r3, #47972	; 0xbb64
     a68:	e3403014 	movt	r3, #20
     a6c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     a70:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     a74:	e3023b08 	movw	r3, #11016	; 0x2b08
     a78:	e3403000 	movt	r3, #0
     a7c:	e5933000 	ldr	r3, [r3]
     a80:	e0030293 	mul	r3, r3, r2
     a84:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     a88:	e0823003 	add	r3, r2, r3
     a8c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}if(noteCC){
     a90:	e51b3058 	ldr	r3, [r11, #-88]	; 0xffffffa8
     a94:	e3530000 	cmp	r3, #0
     a98:	0a00000a 	beq	ac8 <ICDIPTR+0x2c8>
				s += amp * noteCC1[t7];
     a9c:	e30a3964 	movw	r3, #43364	; 0xa964
     aa0:	e3403017 	movt	r3, #23
     aa4:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     aa8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
     aac:	e3023b08 	movw	r3, #11016	; 0x2b08
     ab0:	e3403000 	movt	r3, #0
     ab4:	e5933000 	ldr	r3, [r3]
     ab8:	e0030293 	mul	r3, r3, r2
     abc:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     ac0:	e0823003 	add	r3, r2, r3
     ac4:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8

		}

			if(audio_write_data_ASM(s,s)){	//write audio decoder
     ac8:	e51b0038 	ldr	r0, [r11, #-56]	; 0xffffffc8
     acc:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
     ad0:	eb0001d1 	bl	121c <audio_write_data_ASM>
     ad4:	e1a03000 	mov	r3, r0
     ad8:	e3530000 	cmp	r3, #0
     adc:	0a000049 	beq	c08 <ICDICFR+0x8>
				t0++;
     ae0:	e51b3008 	ldr	r3, [r11, #-8]
     ae4:	e2833001 	add	r3, r3, #1
     ae8:	e50b3008 	str	r3, [r11, #-8]
				t1++;
     aec:	e51b300c 	ldr	r3, [r11, #-12]
     af0:	e2833001 	add	r3, r3, #1
     af4:	e50b300c 	str	r3, [r11, #-12]
				t2++;
     af8:	e51b3010 	ldr	r3, [r11, #-16]
     afc:	e2833001 	add	r3, r3, #1
     b00:	e50b3010 	str	r3, [r11, #-16]
				t3++;
     b04:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b08:	e2833001 	add	r3, r3, #1
     b0c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				t4++;
     b10:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b14:	e2833001 	add	r3, r3, #1
     b18:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				t5++;
     b1c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     b20:	e2833001 	add	r3, r3, #1
     b24:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				t6++;
     b28:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     b2c:	e2833001 	add	r3, r3, #1
     b30:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
				t7++;
     b34:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     b38:	e2833001 	add	r3, r3, #1
     b3c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
				if(!flag){					//some hard code here
     b40:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     b44:	e3530000 	cmp	r3, #0
     b48:	1a000026 	bne	be8 <ICDIPTR+0x3e8>
					if(fflag){
     b4c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     b50:	e3530000 	cmp	r3, #0
     b54:	0a000005 	beq	b70 <ICDIPTR+0x370>
						fflag = 0;
     b58:	e3a03000 	mov	r3, #0
     b5c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
						i--;
     b60:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     b64:	e2433001 	sub	r3, r3, #1
     b68:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     b6c:	ea00001a 	b	bdc <ICDIPTR+0x3dc>
					}
					else{
						arrr[i] = 120 + (s)/800000;				//save the signal 320 by 320 for vga
     b70:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     b74:	e30b3589 	movw	r3, #46473	; 0xb589
     b78:	e34134f8 	movt	r3, #5368	; 0x14f8
     b7c:	e0c31293 	smull	r1, r3, r3, r2
     b80:	e1a01843 	asr	r1, r3, #16
     b84:	e1a03fc2 	asr	r3, r2, #31
     b88:	e0633001 	rsb	r3, r3, r1
     b8c:	e2831078 	add	r1, r3, #120	; 0x78
     b90:	e3023264 	movw	r3, #8804	; 0x2264
     b94:	e3403003 	movt	r3, #3
     b98:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     b9c:	e7831102 	str	r1, [r3, r2, lsl #2]

						if(arrr[i]==119&&arrr[i-1]<=119){		//some hard code here
     ba0:	e3023264 	movw	r3, #8804	; 0x2264
     ba4:	e3403003 	movt	r3, #3
     ba8:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     bac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     bb0:	e3530077 	cmp	r3, #119	; 0x77
     bb4:	1a000008 	bne	bdc <ICDIPTR+0x3dc>
     bb8:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     bbc:	e2432001 	sub	r2, r3, #1
     bc0:	e3023264 	movw	r3, #8804	; 0x2264
     bc4:	e3403003 	movt	r3, #3
     bc8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     bcc:	e3530077 	cmp	r3, #119	; 0x77
     bd0:	ca000001 	bgt	bdc <ICDIPTR+0x3dc>
							fflag = 1;
     bd4:	e3a03001 	mov	r3, #1
     bd8:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
						}
					}
					i++;										//increment the vga points array counter
     bdc:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     be0:	e2833001 	add	r3, r3, #1
     be4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
				}

				if(i>=319){										//if contineous 320 points are ready set flag to 1
     be8:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
     bec:	e300313e 	movw	r3, #318	; 0x13e
     bf0:	e1520003 	cmp	r2, r3
     bf4:	da000003 	ble	c08 <ICDICFR+0x8>
					i = 0;
     bf8:	e3a03000 	mov	r3, #0
     bfc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
					flag = 1;
     c00:	e3a03001 	mov	r3, #1
     c04:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0

				}
			}

			if(t0>=(int)48000/130.813){		//reset the audio counters in different array places to avoid audio discontinuity
     c08:	e51b0008 	ldr	r0, [r11, #-8]
     c0c:	eb000491 	bl	1e58 <__aeabi_i2d>
     c10:	e1a02000 	mov	r2, r0
     c14:	e1a03001 	mov	r3, r1
     c18:	e1a00002 	mov	r0, r2
     c1c:	e1a01003 	mov	r1, r3
     c20:	e3082962 	movw	r2, #35170	; 0x8962
     c24:	e34e2368 	movt	r2, #58216	; 0xe368
     c28:	e30e3ef9 	movw	r3, #61177	; 0xeef9
     c2c:	e3443076 	movt	r3, #16502	; 0x4076
     c30:	eb000504 	bl	2048 <__aeabi_dcmpge>
     c34:	e1a03000 	mov	r3, r0
     c38:	e3530000 	cmp	r3, #0
     c3c:	0a000001 	beq	c48 <ICDICFR+0x48>
				t0=0;
     c40:	e3a03000 	mov	r3, #0
     c44:	e50b3008 	str	r3, [r11, #-8]
			}
			if(t1>=(int)48000/146.832){
     c48:	e51b000c 	ldr	r0, [r11, #-12]
     c4c:	eb000481 	bl	1e58 <__aeabi_i2d>
     c50:	e1a02000 	mov	r2, r0
     c54:	e1a03001 	mov	r3, r1
     c58:	e1a00002 	mov	r0, r2
     c5c:	e1a01003 	mov	r1, r3
     c60:	e3002157 	movw	r2, #343	; 0x157
     c64:	e34a2c50 	movt	r2, #44112	; 0xac50
     c68:	e3063e77 	movw	r3, #28279	; 0x6e77
     c6c:	e3443074 	movt	r3, #16500	; 0x4074
     c70:	eb0004f4 	bl	2048 <__aeabi_dcmpge>
     c74:	e1a03000 	mov	r3, r0
     c78:	e3530000 	cmp	r3, #0
     c7c:	0a000001 	beq	c88 <ICDICFR+0x88>
				t1=0;
     c80:	e3a03000 	mov	r3, #0
     c84:	e50b300c 	str	r3, [r11, #-12]
			}
			if(t2>=(int)48000/164.814){
     c88:	e51b0010 	ldr	r0, [r11, #-16]
     c8c:	eb000471 	bl	1e58 <__aeabi_i2d>
     c90:	e1a02000 	mov	r2, r0
     c94:	e1a03001 	mov	r3, r1
     c98:	e1a00002 	mov	r0, r2
     c9c:	e1a01003 	mov	r1, r3
     ca0:	e30424ad 	movw	r2, #17581	; 0x44ad
     ca4:	e3452e93 	movt	r2, #24211	; 0x5e93
     ca8:	e30333cc 	movw	r3, #13260	; 0x33cc
     cac:	e3443072 	movt	r3, #16498	; 0x4072
     cb0:	eb0004e4 	bl	2048 <__aeabi_dcmpge>
     cb4:	e1a03000 	mov	r3, r0
     cb8:	e3530000 	cmp	r3, #0
     cbc:	0a000001 	beq	cc8 <ICDICFR+0xc8>
				t2=0;
     cc0:	e3a03000 	mov	r3, #0
     cc4:	e50b3010 	str	r3, [r11, #-16]
			}
			if(t3>=(int)48000/174.614){
     cc8:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     ccc:	eb000461 	bl	1e58 <__aeabi_i2d>
     cd0:	e1a02000 	mov	r2, r0
     cd4:	e1a03001 	mov	r3, r1
     cd8:	e1a00002 	mov	r0, r2
     cdc:	e1a01003 	mov	r1, r3
     ce0:	e30d2aa2 	movw	r2, #55970	; 0xdaa2
     ce4:	e34d23b4 	movt	r2, #54196	; 0xd3b4
     ce8:	e3023e45 	movw	r3, #11845	; 0x2e45
     cec:	e3443071 	movt	r3, #16497	; 0x4071
     cf0:	eb0004d4 	bl	2048 <__aeabi_dcmpge>
     cf4:	e1a03000 	mov	r3, r0
     cf8:	e3530000 	cmp	r3, #0
     cfc:	0a000001 	beq	d08 <ICDICFR+0x108>
				t3=0;
     d00:	e3a03000 	mov	r3, #0
     d04:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			}
			if(t4>=(int)48000/195.998){
     d08:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     d0c:	eb000451 	bl	1e58 <__aeabi_i2d>
     d10:	e1a02000 	mov	r2, r0
     d14:	e1a03001 	mov	r3, r1
     d18:	e1a00002 	mov	r0, r2
     d1c:	e1a01003 	mov	r1, r3
     d20:	e30d270f 	movw	r2, #55055	; 0xd70f
     d24:	e3482da5 	movt	r2, #36261	; 0x8da5
     d28:	e3093cd0 	movw	r3, #40144	; 0x9cd0
     d2c:	e344306e 	movt	r3, #16494	; 0x406e
     d30:	eb0004c4 	bl	2048 <__aeabi_dcmpge>
     d34:	e1a03000 	mov	r3, r0
     d38:	e3530000 	cmp	r3, #0
     d3c:	0a000001 	beq	d48 <ICDICFR+0x148>
				t4=0;
     d40:	e3a03000 	mov	r3, #0
     d44:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			}
			if(t5>=(int)48000/220.000){
     d48:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     d4c:	eb000441 	bl	1e58 <__aeabi_i2d>
     d50:	e1a02000 	mov	r2, r0
     d54:	e1a03001 	mov	r3, r1
     d58:	e1a00002 	mov	r0, r2
     d5c:	e1a01003 	mov	r1, r3
     d60:	e3012746 	movw	r2, #5958	; 0x1746
     d64:	e347245d 	movt	r2, #29789	; 0x745d
     d68:	e30435d1 	movw	r3, #17873	; 0x45d1
     d6c:	e344306b 	movt	r3, #16491	; 0x406b
     d70:	eb0004b4 	bl	2048 <__aeabi_dcmpge>
     d74:	e1a03000 	mov	r3, r0
     d78:	e3530000 	cmp	r3, #0
     d7c:	0a000001 	beq	d88 <ICDICFR+0x188>
				t5=0;
     d80:	e3a03000 	mov	r3, #0
     d84:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			}
			if(t6>=(int)48000/246.942){
     d88:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
     d8c:	eb000431 	bl	1e58 <__aeabi_i2d>
     d90:	e1a02000 	mov	r2, r0
     d94:	e1a03001 	mov	r3, r1
     d98:	e1a00002 	mov	r0, r2
     d9c:	e1a01003 	mov	r1, r3
     da0:	e3062d13 	movw	r2, #27923	; 0x6d13
     da4:	e3482580 	movt	r2, #34176	; 0x8580
     da8:	e3043c15 	movw	r3, #19477	; 0x4c15
     dac:	e3443068 	movt	r3, #16488	; 0x4068
     db0:	eb0004a4 	bl	2048 <__aeabi_dcmpge>
     db4:	e1a03000 	mov	r3, r0
     db8:	e3530000 	cmp	r3, #0
     dbc:	0a000001 	beq	dc8 <ICDICFR+0x1c8>
				t6=0;
     dc0:	e3a03000 	mov	r3, #0
     dc4:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			}
			if(t7>=(int)48000/261.626){
     dc8:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
     dcc:	eb000421 	bl	1e58 <__aeabi_i2d>
     dd0:	e1a02000 	mov	r2, r0
     dd4:	e1a03001 	mov	r3, r1
     dd8:	e1a00002 	mov	r0, r2
     ddc:	e1a01003 	mov	r1, r3
     de0:	e3082962 	movw	r2, #35170	; 0x8962
     de4:	e34e2368 	movt	r2, #58216	; 0xe368
     de8:	e30e3ef9 	movw	r3, #61177	; 0xeef9
     dec:	e3443066 	movt	r3, #16486	; 0x4066
     df0:	eb000494 	bl	2048 <__aeabi_dcmpge>
     df4:	e1a03000 	mov	r3, r0
     df8:	e3530000 	cmp	r3, #0
     dfc:	0a000001 	beq	e08 <ICDICFR+0x208>
				t7=0;
     e00:	e3a03000 	mov	r3, #0
     e04:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
			}


				s=0;						//reset signal
     e08:	e3a03000 	mov	r3, #0
     e0c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	}

	if(hps_tim2_int_flag){					//vga timer
     e10:	e3013090 	movw	r3, #4240	; 0x1090
     e14:	e3403000 	movt	r3, #0
     e18:	e5933000 	ldr	r3, [r3]
     e1c:	e3530000 	cmp	r3, #0
     e20:	0afffe19 	beq	68c <main+0x184>
		hps_tim2_int_flag = 0;				//reset flag
     e24:	e3013090 	movw	r3, #4240	; 0x1090
     e28:	e3403000 	movt	r3, #0
     e2c:	e3a02000 	mov	r2, #0
     e30:	e5832000 	str	r2, [r3]
		
		if(flag){							//draw vga
     e34:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     e38:	e3530000 	cmp	r3, #0
     e3c:	0afffe12 	beq	68c <main+0x184>
			for(j=0; j<320; j++){
     e40:	e3a03000 	mov	r3, #0
     e44:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     e48:	ea00001b 	b	ebc <ICDICFR+0x2bc>
				//if(fflag && !counter){
				//	j = j - 1;
				//	fflag=0;
				//}
				VGA_draw_point_ASM(j, arr[j], 0x0);			//clearing the previously drawed points
     e4c:	e3013d64 	movw	r3, #7524	; 0x1d64
     e50:	e3403003 	movt	r3, #3
     e54:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     e58:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     e5c:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     e60:	e1a01003 	mov	r1, r3
     e64:	e3a02000 	mov	r2, #0
     e68:	eb00021d 	bl	16e4 <VGA_draw_point_ASM>
				VGA_draw_point_ASM(j, arrr[j], 0x2E8B57);		//draw actural points
     e6c:	e3023264 	movw	r3, #8804	; 0x2264
     e70:	e3403003 	movt	r3, #3
     e74:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     e78:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     e7c:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     e80:	e1a01003 	mov	r1, r3
     e84:	e3082b57 	movw	r2, #35671	; 0x8b57
     e88:	e34f2fff 	movt	r2, #65535	; 0xffff
     e8c:	eb000214 	bl	16e4 <VGA_draw_point_ASM>
				arr[j] = arrr[j];							//define previous points
     e90:	e3023264 	movw	r3, #8804	; 0x2264
     e94:	e3403003 	movt	r3, #3
     e98:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     e9c:	e7931102 	ldr	r1, [r3, r2, lsl #2]
     ea0:	e3013d64 	movw	r3, #7524	; 0x1d64
     ea4:	e3403003 	movt	r3, #3
     ea8:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     eac:	e7831102 	str	r1, [r3, r2, lsl #2]

	if(hps_tim2_int_flag){					//vga timer
		hps_tim2_int_flag = 0;				//reset flag
		
		if(flag){							//draw vga
			for(j=0; j<320; j++){
     eb0:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     eb4:	e2833001 	add	r3, r3, #1
     eb8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     ebc:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     ec0:	e300313f 	movw	r3, #319	; 0x13f
     ec4:	e1520003 	cmp	r2, r3
     ec8:	daffffdf 	ble	e4c <ICDICFR+0x24c>
				//}
				VGA_draw_point_ASM(j, arr[j], 0x0);			//clearing the previously drawed points
				VGA_draw_point_ASM(j, arrr[j], 0x2E8B57);		//draw actural points
				arr[j] = arrr[j];							//define previous points
			}
			flag = 0;										//reset flag
     ecc:	e3a03000 	mov	r3, #0
     ed0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		}


	}

}
     ed4:	eafffdec 	b	68c <main+0x184>

00000ed8 <HEX_clear_ASM>:
     ed8:	e3a01000 	mov	r1, #0
     edc:	ea000004 	b	ef4 <WRITE>

00000ee0 <HEX_flood_ASM>:
     ee0:	e3a0107f 	mov	r1, #127	; 0x7f
     ee4:	ea000002 	b	ef4 <WRITE>

00000ee8 <HEX_write_ASM>:
     ee8:	e59f2064 	ldr	r2, [pc, #100]	; f54 <PATTERNS+0x14>
     eec:	e7d21001 	ldrb	r1, [r2, r1]
     ef0:	eaffffff 	b	ef4 <WRITE>

00000ef4 <WRITE>:
     ef4:	e92d0030 	push	{r4, r5}
     ef8:	e59f2058 	ldr	r2, [pc, #88]	; f58 <PATTERNS+0x18>
     efc:	e3a03000 	mov	r3, #0
     f00:	e3e050ff 	mvn	r5, #255	; 0xff

00000f04 <LOOP>:
     f04:	e3100001 	tst	r0, #1
     f08:	0a000003 	beq	f1c <CONTINUE>
     f0c:	e5924000 	ldr	r4, [r2]
     f10:	e0044005 	and	r4, r4, r5
     f14:	e1844001 	orr	r4, r4, r1
     f18:	e5824000 	str	r4, [r2]

00000f1c <CONTINUE>:
     f1c:	e1a05c65 	ror	r5, r5, #24
     f20:	e1a01c61 	ror	r1, r1, #24
     f24:	e2833001 	add	r3, r3, #1
     f28:	e3530004 	cmp	r3, #4
     f2c:	059f2028 	ldreq	r2, [pc, #40]	; f5c <PATTERNS+0x1c>
     f30:	e1b000a0 	lsrs	r0, r0, #1
     f34:	1afffff2 	bne	f04 <LOOP>
     f38:	e8bd0030 	pop	{r4, r5}
     f3c:	e12fff1e 	bx	lr

00000f40 <PATTERNS>:
     f40:	4f5b063f 	.word	0x4f5b063f
     f44:	077d6d66 	.word	0x077d6d66
     f48:	7c776f7f 	.word	0x7c776f7f
     f4c:	71795e39 	.word	0x71795e39
     f50:	000000ff 	.word	0x000000ff
     f54:	00000f40 	.word	0x00000f40
     f58:	ff200020 	.word	0xff200020
     f5c:	ff200030 	.word	0xff200030

00000f60 <HPS_TIM_config_ASM>:
     f60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     f64:	e3a01000 	mov	r1, #0
     f68:	e3a02001 	mov	r2, #1
     f6c:	e5907000 	ldr	r7, [r0]
     f70:	eaffffff 	b	f74 <LOOP>

00000f74 <LOOP>:
     f74:	e1170112 	tst	r7, r2, lsl r1
     f78:	0a000000 	beq	f80 <CONTINUE>
     f7c:	eb000004 	bl	f94 <CONFIG>

00000f80 <CONTINUE>:
     f80:	e2811001 	add	r1, r1, #1
     f84:	e3510004 	cmp	r1, #4
     f88:	bafffff9 	blt	f74 <LOOP>

00000f8c <DONE>:
     f8c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     f90:	e12fff1e 	bx	lr

00000f94 <CONFIG>:
     f94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f98:	e59f30e4 	ldr	r3, [pc, #228]	; 1084 <HPS_TIM_BASE+0x10>
     f9c:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     fa0:	eb000005 	bl	fbc <DISABLE>
     fa4:	eb000008 	bl	fcc <SET_LOAD_VAL>
     fa8:	eb00000e 	bl	fe8 <SET_LOAD_BIT>
     fac:	eb000013 	bl	1000 <SET_INT_BIT>
     fb0:	eb000019 	bl	101c <SET_EN_BIT>
     fb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fb8:	e12fff1e 	bx	lr

00000fbc <DISABLE>:
     fbc:	e5945008 	ldr	r5, [r4, #8]
     fc0:	e3c55001 	bic	r5, r5, #1
     fc4:	e5845008 	str	r5, [r4, #8]
     fc8:	e12fff1e 	bx	lr

00000fcc <SET_LOAD_VAL>:
     fcc:	e5905004 	ldr	r5, [r0, #4]
     fd0:	e3a06019 	mov	r6, #25
     fd4:	e0050695 	mul	r5, r5, r6
     fd8:	e3510002 	cmp	r1, #2
     fdc:	b1a05105 	lsllt	r5, r5, #2
     fe0:	e5845000 	str	r5, [r4]
     fe4:	e12fff1e 	bx	lr

00000fe8 <SET_LOAD_BIT>:
     fe8:	e5945008 	ldr	r5, [r4, #8]
     fec:	e5906008 	ldr	r6, [r0, #8]
     ff0:	e3c55002 	bic	r5, r5, #2
     ff4:	e1855086 	orr	r5, r5, r6, lsl #1
     ff8:	e5845008 	str	r5, [r4, #8]
     ffc:	e12fff1e 	bx	lr

00001000 <SET_INT_BIT>:
    1000:	e5945008 	ldr	r5, [r4, #8]
    1004:	e590600c 	ldr	r6, [r0, #12]
    1008:	e2266001 	eor	r6, r6, #1
    100c:	e3c55004 	bic	r5, r5, #4
    1010:	e1855106 	orr	r5, r5, r6, lsl #2
    1014:	e5845008 	str	r5, [r4, #8]
    1018:	e12fff1e 	bx	lr

0000101c <SET_EN_BIT>:
    101c:	e5945008 	ldr	r5, [r4, #8]
    1020:	e5906010 	ldr	r6, [r0, #16]
    1024:	e3c55001 	bic	r5, r5, #1
    1028:	e1855006 	orr	r5, r5, r6
    102c:	e5845008 	str	r5, [r4, #8]
    1030:	e12fff1e 	bx	lr

00001034 <HPS_TIM_clear_INT_ASM>:
    1034:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1038:	e3a01000 	mov	r1, #0
    103c:	e3a02001 	mov	r2, #1
    1040:	eaffffff 	b	1044 <INT_LOOP>

00001044 <INT_LOOP>:
    1044:	e1100112 	tst	r0, r2, lsl r1
    1048:	0a000000 	beq	1050 <INT_CONTINUE>
    104c:	eb000004 	bl	1064 <CLEAR_IT>

00001050 <INT_CONTINUE>:
    1050:	e2811001 	add	r1, r1, #1
    1054:	e3510004 	cmp	r1, #4
    1058:	bafffff9 	blt	1044 <INT_LOOP>

0000105c <INT_DONE>:
    105c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1060:	e12fff1e 	bx	lr

00001064 <CLEAR_IT>:
    1064:	e59f3018 	ldr	r3, [pc, #24]	; 1084 <HPS_TIM_BASE+0x10>
    1068:	e7933101 	ldr	r3, [r3, r1, lsl #2]
    106c:	e593300c 	ldr	r3, [r3, #12]
    1070:	e12fff1e 	bx	lr

00001074 <HPS_TIM_BASE>:
    1074:	ffc08000 	.word	0xffc08000
    1078:	ffc09000 	.word	0xffc09000
    107c:	ffd00000 	.word	0xffd00000
    1080:	ffd01000 	.word	0xffd01000
    1084:	00001074 	.word	0x00001074

00001088 <hps_tim0_int_flag>:
    1088:	00000000 	.word	0x00000000

0000108c <hps_tim1_int_flag>:
    108c:	00000000 	.word	0x00000000

00001090 <hps_tim2_int_flag>:
    1090:	00000000 	.word	0x00000000

00001094 <kb_int_flag>:
    1094:	00000000 	.word	0x00000000

00001098 <A9_PRIV_TIM_ISR>:

kb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
    1098:	e12fff1e 	bx	lr

0000109c <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
    109c:	e12fff1e 	bx	lr

000010a0 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
    10a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
    10a4:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
    10a8:	ebffffe1 	bl	1034 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
    10ac:	e59f0074 	ldr	r0, [pc, #116]	; 1128 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
    10b0:	e3a01001 	mov	r1, #1
	STR R1, [R0]
    10b4:	e5801000 	str	r1, [r0]

	POP {LR}
    10b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    10bc:	e12fff1e 	bx	lr

000010c0 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
    10c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x2
    10c4:	e3a00002 	mov	r0, #2
	BL HPS_TIM_clear_INT_ASM
    10c8:	ebffffd9 	bl	1034 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim1_int_flag
    10cc:	e59f0058 	ldr	r0, [pc, #88]	; 112c <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1
    10d0:	e3a01001 	mov	r1, #1
	STR R1, [R0]
    10d4:	e5801000 	str	r1, [r0]

	POP {LR}
    10d8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    10dc:	e12fff1e 	bx	lr

000010e0 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	PUSH {LR}
    10e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x4
    10e4:	e3a00004 	mov	r0, #4
	BL HPS_TIM_clear_INT_ASM
    10e8:	ebffffd1 	bl	1034 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim2_int_flag
    10ec:	e59f003c 	ldr	r0, [pc, #60]	; 1130 <FPGA_PS2_DUAL_ISR+0xc>
	MOV R1, #1
    10f0:	e3a01001 	mov	r1, #1
	STR R1, [R0]
    10f4:	e5801000 	str	r1, [r0]

	POP {LR}
    10f8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    10fc:	e12fff1e 	bx	lr

00001100 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
    1100:	e12fff1e 	bx	lr

00001104 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
    1104:	e12fff1e 	bx	lr

00001108 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
    1108:	e12fff1e 	bx	lr

0000110c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
    110c:	e12fff1e 	bx	lr

00001110 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
    1110:	e12fff1e 	bx	lr

00001114 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
    1114:	e12fff1e 	bx	lr

00001118 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
    1118:	e12fff1e 	bx	lr

0000111c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
    111c:	e12fff1e 	bx	lr

00001120 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
    1120:	e12fff1e 	bx	lr

00001124 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
    1124:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
    1128:	00001088 	.word	0x00001088
	PUSH {LR}
	
	MOV R0, #0x2
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim1_int_flag
    112c:	0000108c 	.word	0x0000108c
	PUSH {LR}
	
	MOV R0, #0x4
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim2_int_flag
    1130:	00001090 	.word	0x00001090

00001134 <read_LEDs_ASM>:
    1134:	e59f1010 	ldr	r1, [pc, #16]	; 114c <write_LEDs_ASM+0xc>
    1138:	e5910000 	ldr	r0, [r1]
    113c:	e12fff1e 	bx	lr

00001140 <write_LEDs_ASM>:
    1140:	e59f1004 	ldr	r1, [pc, #4]	; 114c <write_LEDs_ASM+0xc>
    1144:	e5810000 	str	r0, [r1]
    1148:	e12fff1e 	bx	lr
    114c:	ff200000 	.word	0xff200000

00001150 <audio_read_data_ASM>:
    1150:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1154:	e92d0003 	push	{r0, r1}
    1158:	eb000093 	bl	13ac <audio_read_ralc_ASM>
    115c:	e3500000 	cmp	r0, #0
    1160:	08bd0003 	popeq	{r0, r1}
    1164:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1168:	03a00000 	moveq	r0, #0
    116c:	012fff1e 	bxeq	lr
    1170:	eb000092 	bl	13c0 <audio_read_rarc_ASM>
    1174:	e3500000 	cmp	r0, #0
    1178:	08bd0003 	popeq	{r0, r1}
    117c:	03a00000 	moveq	r0, #0
    1180:	012fff1e 	bxeq	lr
    1184:	e8bd0003 	pop	{r0, r1}
    1188:	e59f2240 	ldr	r2, [pc, #576]	; 13d0 <audio_read_rarc_ASM+0x10>
    118c:	e5922000 	ldr	r2, [r2]
    1190:	e5802000 	str	r2, [r0]
    1194:	e59f3238 	ldr	r3, [pc, #568]	; 13d4 <audio_read_rarc_ASM+0x14>
    1198:	e5933000 	ldr	r3, [r3]
    119c:	e5813000 	str	r3, [r1]
    11a0:	e3a00001 	mov	r0, #1

000011a4 <audio_read_leftdata_ASM>:
    11a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    11a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    11ac:	eb00007e 	bl	13ac <audio_read_ralc_ASM>
    11b0:	e3500000 	cmp	r0, #0
    11b4:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    11b8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    11bc:	03a00000 	moveq	r0, #0
    11c0:	012fff1e 	bxeq	lr
    11c4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    11c8:	e59f2200 	ldr	r2, [pc, #512]	; 13d0 <audio_read_rarc_ASM+0x10>
    11cc:	e5922000 	ldr	r2, [r2]
    11d0:	e5802000 	str	r2, [r0]
    11d4:	e3a00001 	mov	r0, #1
    11d8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    11dc:	e12fff1e 	bx	lr

000011e0 <audio_read_rightdata_ASM>:
    11e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    11e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    11e8:	eb000074 	bl	13c0 <audio_read_rarc_ASM>
    11ec:	e3500000 	cmp	r0, #0
    11f0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    11f4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    11f8:	03a00000 	moveq	r0, #0
    11fc:	012fff1e 	bxeq	lr
    1200:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1204:	e59f21c8 	ldr	r2, [pc, #456]	; 13d4 <audio_read_rarc_ASM+0x14>
    1208:	e5922000 	ldr	r2, [r2]
    120c:	e5802000 	str	r2, [r0]
    1210:	e3a00001 	mov	r0, #1
    1214:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1218:	e12fff1e 	bx	lr

0000121c <audio_write_data_ASM>:
    121c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1220:	e92d0003 	push	{r0, r1}
    1224:	eb000056 	bl	1384 <audio_read_wslc_ASM>
    1228:	e3500000 	cmp	r0, #0
    122c:	08bd0003 	popeq	{r0, r1}
    1230:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1234:	03a00000 	moveq	r0, #0
    1238:	012fff1e 	bxeq	lr
    123c:	eb000055 	bl	1398 <audio_read_wsrc_ASM>
    1240:	e3500000 	cmp	r0, #0
    1244:	08bd0003 	popeq	{r0, r1}
    1248:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    124c:	03a00000 	moveq	r0, #0
    1250:	012fff1e 	bxeq	lr
    1254:	e8bd0003 	pop	{r0, r1}
    1258:	e59f2170 	ldr	r2, [pc, #368]	; 13d0 <audio_read_rarc_ASM+0x10>
    125c:	e5820000 	str	r0, [r2]
    1260:	e59f316c 	ldr	r3, [pc, #364]	; 13d4 <audio_read_rarc_ASM+0x14>
    1264:	e5831000 	str	r1, [r3]
    1268:	e3a00001 	mov	r0, #1
    126c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1270:	e12fff1e 	bx	lr

00001274 <audio_write_leftdata_ASM>:
    1274:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1278:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    127c:	eb000040 	bl	1384 <audio_read_wslc_ASM>
    1280:	e3500000 	cmp	r0, #0
    1284:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1288:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    128c:	03a00000 	moveq	r0, #0
    1290:	012fff1e 	bxeq	lr
    1294:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1298:	e59f2130 	ldr	r2, [pc, #304]	; 13d0 <audio_read_rarc_ASM+0x10>
    129c:	e5820000 	str	r0, [r2]
    12a0:	e3a00001 	mov	r0, #1
    12a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    12a8:	e12fff1e 	bx	lr

000012ac <audio_write_rightdata_ASM>:
    12ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    12b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    12b4:	eb000037 	bl	1398 <audio_read_wsrc_ASM>
    12b8:	e3500000 	cmp	r0, #0
    12bc:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    12c0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    12c4:	03a00000 	moveq	r0, #0
    12c8:	012fff1e 	bxeq	lr
    12cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    12d0:	e59f20fc 	ldr	r2, [pc, #252]	; 13d4 <audio_read_rarc_ASM+0x14>
    12d4:	e5820000 	str	r0, [r2]
    12d8:	e3a00001 	mov	r0, #1
    12dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    12e0:	e12fff1e 	bx	lr

000012e4 <audio_enable_read_fifo_clear_ASM>:
    12e4:	e59f00ec 	ldr	r0, [pc, #236]	; 13d8 <audio_read_rarc_ASM+0x18>
    12e8:	e5901000 	ldr	r1, [r0]
    12ec:	e3811004 	orr	r1, r1, #4
    12f0:	e5801000 	str	r1, [r0]
    12f4:	e12fff1e 	bx	lr

000012f8 <audio_enable_write_fifo_clear_ASM>:
    12f8:	e59f00d8 	ldr	r0, [pc, #216]	; 13d8 <audio_read_rarc_ASM+0x18>
    12fc:	e5901000 	ldr	r1, [r0]
    1300:	e3811008 	orr	r1, r1, #8
    1304:	e5801000 	str	r1, [r0]
    1308:	e12fff1e 	bx	lr

0000130c <audio_disable_read_fifo_clear_ASM>:
    130c:	e59f00c4 	ldr	r0, [pc, #196]	; 13d8 <audio_read_rarc_ASM+0x18>
    1310:	e5901000 	ldr	r1, [r0]
    1314:	e3c11004 	bic	r1, r1, #4
    1318:	e5801000 	str	r1, [r0]
    131c:	e12fff1e 	bx	lr

00001320 <audio_disable_write_fifo_clear_ASM>:
    1320:	e59f00b0 	ldr	r0, [pc, #176]	; 13d8 <audio_read_rarc_ASM+0x18>
    1324:	e5901000 	ldr	r1, [r0]
    1328:	e3c11008 	bic	r1, r1, #8
    132c:	e5801000 	str	r1, [r0]
    1330:	e12fff1e 	bx	lr

00001334 <audio_enable_read_int_ASM>:
    1334:	e59f009c 	ldr	r0, [pc, #156]	; 13d8 <audio_read_rarc_ASM+0x18>
    1338:	e5901000 	ldr	r1, [r0]
    133c:	e3811001 	orr	r1, r1, #1
    1340:	e5801000 	str	r1, [r0]
    1344:	e12fff1e 	bx	lr

00001348 <audio_enable_write_int_ASM>:
    1348:	e59f0088 	ldr	r0, [pc, #136]	; 13d8 <audio_read_rarc_ASM+0x18>
    134c:	e5901000 	ldr	r1, [r0]
    1350:	e3811002 	orr	r1, r1, #2
    1354:	e5801000 	str	r1, [r0]
    1358:	e12fff1e 	bx	lr

0000135c <audio_disable_read_int_ASM>:
    135c:	e59f0074 	ldr	r0, [pc, #116]	; 13d8 <audio_read_rarc_ASM+0x18>
    1360:	e5901000 	ldr	r1, [r0]
    1364:	e3c11001 	bic	r1, r1, #1
    1368:	e5801000 	str	r1, [r0]
    136c:	e12fff1e 	bx	lr

00001370 <audio_disable_write_int_ASM>:
    1370:	e59f0060 	ldr	r0, [pc, #96]	; 13d8 <audio_read_rarc_ASM+0x18>
    1374:	e5901000 	ldr	r1, [r0]
    1378:	e3c11002 	bic	r1, r1, #2
    137c:	e5801000 	str	r1, [r0]
    1380:	e12fff1e 	bx	lr

00001384 <audio_read_wslc_ASM>:
    1384:	e59f0050 	ldr	r0, [pc, #80]	; 13dc <audio_read_rarc_ASM+0x1c>
    1388:	e5900000 	ldr	r0, [r0]
    138c:	e1a00c20 	lsr	r0, r0, #24
    1390:	e20000ff 	and	r0, r0, #255	; 0xff
    1394:	e12fff1e 	bx	lr

00001398 <audio_read_wsrc_ASM>:
    1398:	e59f003c 	ldr	r0, [pc, #60]	; 13dc <audio_read_rarc_ASM+0x1c>
    139c:	e5900000 	ldr	r0, [r0]
    13a0:	e1a00820 	lsr	r0, r0, #16
    13a4:	e20000ff 	and	r0, r0, #255	; 0xff
    13a8:	e12fff1e 	bx	lr

000013ac <audio_read_ralc_ASM>:
    13ac:	e59f0028 	ldr	r0, [pc, #40]	; 13dc <audio_read_rarc_ASM+0x1c>
    13b0:	e5900000 	ldr	r0, [r0]
    13b4:	e1a00420 	lsr	r0, r0, #8
    13b8:	e20000ff 	and	r0, r0, #255	; 0xff
    13bc:	e12fff1e 	bx	lr

000013c0 <audio_read_rarc_ASM>:
    13c0:	e59f0014 	ldr	r0, [pc, #20]	; 13dc <audio_read_rarc_ASM+0x1c>
    13c4:	e5900000 	ldr	r0, [r0]
    13c8:	e20000ff 	and	r0, r0, #255	; 0xff
    13cc:	e12fff1e 	bx	lr
    13d0:	ff203048 	.word	0xff203048
    13d4:	ff20304c 	.word	0xff20304c
    13d8:	ff203040 	.word	0xff203040
    13dc:	ff203044 	.word	0xff203044

000013e0 <read_ps2_data_ASM>:
    13e0:	e59f114c 	ldr	r1, [pc, #332]	; 1534 <ps2_fifo_ravail+0x4>
    13e4:	e5911000 	ldr	r1, [r1]
    13e8:	e3a02902 	mov	r2, #32768	; 0x8000
    13ec:	e1110002 	tst	r1, r2
    13f0:	03a00000 	moveq	r0, #0
    13f4:	012fff1e 	bxeq	lr
    13f8:	e20120ff 	and	r2, r1, #255	; 0xff
    13fc:	e5c02000 	strb	r2, [r0]
    1400:	e59f2130 	ldr	r2, [pc, #304]	; 1538 <ps2_fifo_ravail+0x8>
    1404:	e0010002 	and	r0, r1, r2
    1408:	e1a00820 	lsr	r0, r0, #16
    140c:	e12fff1e 	bx	lr

00001410 <enable_ps2_int_ASM>:
    1410:	e59f011c 	ldr	r0, [pc, #284]	; 1534 <ps2_fifo_ravail+0x4>
    1414:	e3a01001 	mov	r1, #1
    1418:	e5c01004 	strb	r1, [r0, #4]
    141c:	e12fff1e 	bx	lr

00001420 <disable_ps2_int_ASM>:
    1420:	e59f010c 	ldr	r0, [pc, #268]	; 1534 <ps2_fifo_ravail+0x4>
    1424:	e3a01000 	mov	r1, #0
    1428:	e5c01004 	strb	r1, [r0, #4]
    142c:	e12fff1e 	bx	lr

00001430 <ps2_fifo_data>:
	...

00001530 <ps2_fifo_ravail>:
    1530:	00000000 	.word	0x00000000
    1534:	ff200100 	.word	0xff200100
    1538:	ffff0000 	.word	0xffff0000

0000153c <read_PB_data_ASM>:
    153c:	e59f1074 	ldr	r1, [pc, #116]	; 15b8 <disable_PB_INT_ASM+0x14>
    1540:	e5910000 	ldr	r0, [r1]
    1544:	e12fff1e 	bx	lr

00001548 <PB_data_is_pressed_ASM>:
    1548:	e59f1068 	ldr	r1, [pc, #104]	; 15b8 <disable_PB_INT_ASM+0x14>
    154c:	e5912000 	ldr	r2, [r1]
    1550:	e0000002 	and	r0, r0, r2
    1554:	e3300000 	teq	r0, #0
    1558:	13a00001 	movne	r0, #1
    155c:	e12fff1e 	bx	lr

00001560 <read_PB_edgecap_ASM>:
    1560:	e59f1054 	ldr	r1, [pc, #84]	; 15bc <disable_PB_INT_ASM+0x18>
    1564:	e5910000 	ldr	r0, [r1]
    1568:	e12fff1e 	bx	lr

0000156c <PB_edgecap_is_pressed_ASM>:
    156c:	e59f1048 	ldr	r1, [pc, #72]	; 15bc <disable_PB_INT_ASM+0x18>
    1570:	e5912000 	ldr	r2, [r1]
    1574:	e0000002 	and	r0, r0, r2
    1578:	e3300000 	teq	r0, #0
    157c:	13a00001 	movne	r0, #1
    1580:	e12fff1e 	bx	lr

00001584 <PB_clear_edgecp_ASM>:
    1584:	e59f1030 	ldr	r1, [pc, #48]	; 15bc <disable_PB_INT_ASM+0x18>
    1588:	e5810000 	str	r0, [r1]
    158c:	e12fff1e 	bx	lr

00001590 <enable_PB_INT_ASM>:
    1590:	e59f1028 	ldr	r1, [pc, #40]	; 15c0 <disable_PB_INT_ASM+0x1c>
    1594:	e5912000 	ldr	r2, [r1]
    1598:	e1800002 	orr	r0, r0, r2
    159c:	e5810000 	str	r0, [r1]
    15a0:	e12fff1e 	bx	lr

000015a4 <disable_PB_INT_ASM>:
    15a4:	e59f1014 	ldr	r1, [pc, #20]	; 15c0 <disable_PB_INT_ASM+0x1c>
    15a8:	e5912000 	ldr	r2, [r1]
    15ac:	e1c00002 	bic	r0, r0, r2
    15b0:	e5810000 	str	r0, [r1]
    15b4:	e12fff1e 	bx	lr
    15b8:	ff200050 	.word	0xff200050
    15bc:	ff20005c 	.word	0xff20005c
    15c0:	ff200058 	.word	0xff200058

000015c4 <read_slider_switches_ASM>:
    15c4:	e59f1004 	ldr	r1, [pc, #4]	; 15d0 <read_slider_switches_ASM+0xc>
    15c8:	e5910000 	ldr	r0, [r1]
    15cc:	e12fff1e 	bx	lr
    15d0:	ff200040 	.word	0xff200040

000015d4 <VGA_clear_charbuff_ASM>:
    15d4:	e92d0030 	push	{r4, r5}
    15d8:	e3a02000 	mov	r2, #0
    15dc:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    15e0:	e3a00000 	mov	r0, #0

000015e4 <CHAR_LOOPX>:
    15e4:	e3a01000 	mov	r1, #0
    15e8:	e0834000 	add	r4, r3, r0

000015ec <CHAR_LOOPY>:
    15ec:	e0845381 	add	r5, r4, r1, lsl #7
    15f0:	e5c52000 	strb	r2, [r5]
    15f4:	e2811001 	add	r1, r1, #1
    15f8:	e351003c 	cmp	r1, #60	; 0x3c
    15fc:	bafffffa 	blt	15ec <CHAR_LOOPY>
    1600:	e2800001 	add	r0, r0, #1
    1604:	e3500050 	cmp	r0, #80	; 0x50
    1608:	bafffff5 	blt	15e4 <CHAR_LOOPX>
    160c:	e8bd0030 	pop	{r4, r5}
    1610:	e12fff1e 	bx	lr

00001614 <VGA_clear_pixelbuff_ASM>:
    1614:	e92d0030 	push	{r4, r5}
    1618:	e3a02000 	mov	r2, #0
    161c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1620:	e3a00000 	mov	r0, #0

00001624 <PIXEL_LOOPX>:
    1624:	e3a01000 	mov	r1, #0
    1628:	e0834080 	add	r4, r3, r0, lsl #1

0000162c <PIXEL_LOOPY>:
    162c:	e0845501 	add	r5, r4, r1, lsl #10
    1630:	e1c520b0 	strh	r2, [r5]
    1634:	e2811001 	add	r1, r1, #1
    1638:	e35100f0 	cmp	r1, #240	; 0xf0
    163c:	bafffffa 	blt	162c <PIXEL_LOOPY>
    1640:	e2800001 	add	r0, r0, #1
    1644:	e3500d05 	cmp	r0, #320	; 0x140
    1648:	bafffff5 	blt	1624 <PIXEL_LOOPX>
    164c:	e8bd0030 	pop	{r4, r5}
    1650:	e12fff1e 	bx	lr

00001654 <VGA_write_char_ASM>:
    1654:	e3500000 	cmp	r0, #0
    1658:	b12fff1e 	bxlt	lr
    165c:	e3510000 	cmp	r1, #0
    1660:	b12fff1e 	bxlt	lr
    1664:	e350004f 	cmp	r0, #79	; 0x4f
    1668:	c12fff1e 	bxgt	lr
    166c:	e351003b 	cmp	r1, #59	; 0x3b
    1670:	c12fff1e 	bxgt	lr
    1674:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1678:	e0833000 	add	r3, r3, r0
    167c:	e0833381 	add	r3, r3, r1, lsl #7
    1680:	e5c32000 	strb	r2, [r3]
    1684:	e12fff1e 	bx	lr

00001688 <VGA_write_byte_ASM>:
    1688:	e3500000 	cmp	r0, #0
    168c:	b12fff1e 	bxlt	lr
    1690:	e3510000 	cmp	r1, #0
    1694:	b12fff1e 	bxlt	lr
    1698:	e350004e 	cmp	r0, #78	; 0x4e
    169c:	c12fff1e 	bxgt	lr
    16a0:	e351003b 	cmp	r1, #59	; 0x3b
    16a4:	c12fff1e 	bxgt	lr
    16a8:	e92d0030 	push	{r4, r5}
    16ac:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    16b0:	e20250f0 	and	r5, r2, #240	; 0xf0
    16b4:	e1a05225 	lsr	r5, r5, #4
    16b8:	e202400f 	and	r4, r2, #15
    16bc:	e59f2068 	ldr	r2, [pc, #104]	; 172c <HEX_ASCII+0x10>
    16c0:	e7d25005 	ldrb	r5, [r2, r5]
    16c4:	e7d24004 	ldrb	r4, [r2, r4]
    16c8:	e0833000 	add	r3, r3, r0
    16cc:	e0833381 	add	r3, r3, r1, lsl #7
    16d0:	e5c35000 	strb	r5, [r3]
    16d4:	e2833001 	add	r3, r3, #1
    16d8:	e5c34000 	strb	r4, [r3]
    16dc:	e8bd0030 	pop	{r4, r5}
    16e0:	e12fff1e 	bx	lr

000016e4 <VGA_draw_point_ASM>:
    16e4:	e59f3044 	ldr	r3, [pc, #68]	; 1730 <HEX_ASCII+0x14>
    16e8:	e3500000 	cmp	r0, #0
    16ec:	b12fff1e 	bxlt	lr
    16f0:	e3510000 	cmp	r1, #0
    16f4:	b12fff1e 	bxlt	lr
    16f8:	e1500003 	cmp	r0, r3
    16fc:	c12fff1e 	bxgt	lr
    1700:	e35100ef 	cmp	r1, #239	; 0xef
    1704:	c12fff1e 	bxgt	lr
    1708:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    170c:	e0833080 	add	r3, r3, r0, lsl #1
    1710:	e0833501 	add	r3, r3, r1, lsl #10
    1714:	e1c320b0 	strh	r2, [r3]
    1718:	e12fff1e 	bx	lr

0000171c <HEX_ASCII>:
    171c:	33323130 	.word	0x33323130
    1720:	37363534 	.word	0x37363534
    1724:	42413938 	.word	0x42413938
    1728:	46454443 	.word	0x46454443
    172c:	0000171c 	.word	0x0000171c
    1730:	0000013f 	.word	0x0000013f

00001734 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1734:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1738:	e28db000 	add	r11, sp, #0
    173c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    1740:	e3a030d3 	mov	r3, #211	; 0xd3
    1744:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1748:	e51b3008 	ldr	r3, [r11, #-8]
    174c:	e129f003 	msr	CPSR_fc, r3
}
    1750:	e28bd000 	add	sp, r11, #0
    1754:	e8bd0800 	ldmfd	sp!, {r11}
    1758:	e12fff1e 	bx	lr

0000175c <enable_A9_interrupts>:

void enable_A9_interrupts() {
    175c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1760:	e28db000 	add	r11, sp, #0
    1764:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    1768:	e3a03053 	mov	r3, #83	; 0x53
    176c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1770:	e51b3008 	ldr	r3, [r11, #-8]
    1774:	e129f003 	msr	CPSR_fc, r3
}
    1778:	e28bd000 	add	sp, r11, #0
    177c:	e8bd0800 	ldmfd	sp!, {r11}
    1780:	e12fff1e 	bx	lr

00001784 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    1784:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1788:	e28db000 	add	r11, sp, #0
    178c:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    1790:	e3e03007 	mvn	r3, #7
    1794:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    1798:	e3a030d2 	mov	r3, #210	; 0xd2
    179c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    17a0:	e51b300c 	ldr	r3, [r11, #-12]
    17a4:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    17a8:	e51b3008 	ldr	r3, [r11, #-8]
    17ac:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    17b0:	e3a030d3 	mov	r3, #211	; 0xd3
    17b4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    17b8:	e51b300c 	ldr	r3, [r11, #-12]
    17bc:	e129f003 	msr	CPSR_fc, r3
}
    17c0:	e28bd000 	add	sp, r11, #0
    17c4:	e8bd0800 	ldmfd	sp!, {r11}
    17c8:	e12fff1e 	bx	lr

000017cc <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    17cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17d0:	e28db000 	add	r11, sp, #0
    17d4:	e24dd01c 	sub	sp, sp, #28
    17d8:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    17dc:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    17e0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    17e4:	e1a031c3 	asr	r3, r3, #3
    17e8:	e3c33003 	bic	r3, r3, #3
    17ec:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    17f0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    17f4:	e203301f 	and	r3, r3, #31
    17f8:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    17fc:	e3a02001 	mov	r2, #1
    1800:	e51b300c 	ldr	r3, [r11, #-12]
    1804:	e1a03312 	lsl	r3, r2, r3
    1808:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    180c:	e51b3008 	ldr	r3, [r11, #-8]
    1810:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1814:	e2433c03 	sub	r3, r3, #768	; 0x300
    1818:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    181c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1820:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1824:	e5921000 	ldr	r1, [r2]
    1828:	e51b2010 	ldr	r2, [r11, #-16]
    182c:	e1812002 	orr	r2, r1, r2
    1830:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1834:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1838:	e3c33003 	bic	r3, r3, #3
    183c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    1840:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1844:	e2033003 	and	r3, r3, #3
    1848:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    184c:	e51b2008 	ldr	r2, [r11, #-8]
    1850:	e51b300c 	ldr	r3, [r11, #-12]
    1854:	e0823003 	add	r3, r2, r3
    1858:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    185c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    1860:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1864:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1868:	e6ef2072 	uxtb	r2, r2
    186c:	e5c32000 	strb	r2, [r3]
}
    1870:	e28bd000 	add	sp, r11, #0
    1874:	e8bd0800 	ldmfd	sp!, {r11}
    1878:	e12fff1e 	bx	lr

0000187c <config_GIC>:

void config_GIC(int len, int* IDs) {
    187c:	e92d4800 	push	{r11, lr}
    1880:	e28db004 	add	r11, sp, #4
    1884:	e24dd010 	sub	sp, sp, #16
    1888:	e50b0010 	str	r0, [r11, #-16]
    188c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1890:	e3a03000 	mov	r3, #0
    1894:	e50b3008 	str	r3, [r11, #-8]
    1898:	ea00000a 	b	18c8 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    189c:	e51b3008 	ldr	r3, [r11, #-8]
    18a0:	e1a03103 	lsl	r3, r3, #2
    18a4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    18a8:	e0823003 	add	r3, r2, r3
    18ac:	e5933000 	ldr	r3, [r3]
    18b0:	e1a00003 	mov	r0, r3
    18b4:	e3a01001 	mov	r1, #1
    18b8:	ebffffc3 	bl	17cc <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    18bc:	e51b3008 	ldr	r3, [r11, #-8]
    18c0:	e2833001 	add	r3, r3, #1
    18c4:	e50b3008 	str	r3, [r11, #-8]
    18c8:	e51b2008 	ldr	r2, [r11, #-8]
    18cc:	e51b3010 	ldr	r3, [r11, #-16]
    18d0:	e1520003 	cmp	r2, r3
    18d4:	bafffff0 	blt	189c <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    18d8:	e30c3104 	movw	r3, #49412	; 0xc104
    18dc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    18e0:	e30f2fff 	movw	r2, #65535	; 0xffff
    18e4:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    18e8:	e3a03cc1 	mov	r3, #49408	; 0xc100
    18ec:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    18f0:	e3a02001 	mov	r2, #1
    18f4:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    18f8:	e3a03a0d 	mov	r3, #53248	; 0xd000
    18fc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1900:	e3a02001 	mov	r2, #1
    1904:	e5832000 	str	r2, [r3]
}
    1908:	e24bd004 	sub	sp, r11, #4
    190c:	e8bd8800 	pop	{r11, pc}

00001910 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    1910:	e24ee004 	sub	lr, lr, #4
    1914:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1918:	e28db018 	add	r11, sp, #24
    191c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1920:	e30c310c 	movw	r3, #49420	; 0xc10c
    1924:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1928:	e5933000 	ldr	r3, [r3]
    192c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    1930:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1934:	e3530053 	cmp	r3, #83	; 0x53
    1938:	0a00003d 	beq	1a34 <__cs3_isr_irq+0x124>
    193c:	e3530053 	cmp	r3, #83	; 0x53
    1940:	ca000011 	bgt	198c <__cs3_isr_irq+0x7c>
    1944:	e353004e 	cmp	r3, #78	; 0x4e
    1948:	0a000031 	beq	1a14 <__cs3_isr_irq+0x104>
    194c:	e353004e 	cmp	r3, #78	; 0x4e
    1950:	ca000006 	bgt	1970 <__cs3_isr_irq+0x60>
    1954:	e3530048 	cmp	r3, #72	; 0x48
    1958:	0a000029 	beq	1a04 <__cs3_isr_irq+0xf4>
    195c:	e3530049 	cmp	r3, #73	; 0x49
    1960:	0a000029 	beq	1a0c <__cs3_isr_irq+0xfc>
    1964:	e353001d 	cmp	r3, #29
    1968:	0a000019 	beq	19d4 <__cs3_isr_irq+0xc4>
    196c:	ea000036 	b	1a4c <__cs3_isr_irq+0x13c>
    1970:	e3530050 	cmp	r3, #80	; 0x50
    1974:	0a00002a 	beq	1a24 <__cs3_isr_irq+0x114>
    1978:	e3530050 	cmp	r3, #80	; 0x50
    197c:	ba000026 	blt	1a1c <__cs3_isr_irq+0x10c>
    1980:	e3530051 	cmp	r3, #81	; 0x51
    1984:	0a000028 	beq	1a2c <__cs3_isr_irq+0x11c>
    1988:	ea00002f 	b	1a4c <__cs3_isr_irq+0x13c>
    198c:	e35300c7 	cmp	r3, #199	; 0xc7
    1990:	0a000013 	beq	19e4 <__cs3_isr_irq+0xd4>
    1994:	e35300c7 	cmp	r3, #199	; 0xc7
    1998:	ca000006 	bgt	19b8 <__cs3_isr_irq+0xa8>
    199c:	e3530059 	cmp	r3, #89	; 0x59
    19a0:	0a000027 	beq	1a44 <__cs3_isr_irq+0x134>
    19a4:	e35300c5 	cmp	r3, #197	; 0xc5
    19a8:	0a00000b 	beq	19dc <__cs3_isr_irq+0xcc>
    19ac:	e3530054 	cmp	r3, #84	; 0x54
    19b0:	0a000021 	beq	1a3c <__cs3_isr_irq+0x12c>
    19b4:	ea000024 	b	1a4c <__cs3_isr_irq+0x13c>
    19b8:	e35300c9 	cmp	r3, #201	; 0xc9
    19bc:	0a00000c 	beq	19f4 <__cs3_isr_irq+0xe4>
    19c0:	e35300c9 	cmp	r3, #201	; 0xc9
    19c4:	ba000008 	blt	19ec <__cs3_isr_irq+0xdc>
    19c8:	e35300ca 	cmp	r3, #202	; 0xca
    19cc:	0a00000a 	beq	19fc <__cs3_isr_irq+0xec>
    19d0:	ea00001d 	b	1a4c <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    19d4:	ebfffdaf 	bl	1098 <A9_PRIV_TIM_ISR>
    19d8:	ea00001c 	b	1a50 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    19dc:	ebfffdae 	bl	109c <HPS_GPIO1_ISR>
    19e0:	ea00001a 	b	1a50 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    19e4:	ebfffdad 	bl	10a0 <HPS_TIM0_ISR>
    19e8:	ea000018 	b	1a50 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    19ec:	ebfffdb3 	bl	10c0 <HPS_TIM1_ISR>
    19f0:	ea000016 	b	1a50 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    19f4:	ebfffdb9 	bl	10e0 <HPS_TIM2_ISR>
    19f8:	ea000014 	b	1a50 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    19fc:	ebfffdbf 	bl	1100 <HPS_TIM3_ISR>
    1a00:	ea000012 	b	1a50 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1a04:	ebfffdbe 	bl	1104 <FPGA_INTERVAL_TIM_ISR>
    1a08:	ea000010 	b	1a50 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1a0c:	ebfffdbd 	bl	1108 <FPGA_PB_KEYS_ISR>
    1a10:	ea00000e 	b	1a50 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1a14:	ebfffdbc 	bl	110c <FPGA_Audio_ISR>
    1a18:	ea00000c 	b	1a50 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1a1c:	ebfffdbb 	bl	1110 <FPGA_PS2_ISR>
    1a20:	ea00000a 	b	1a50 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1a24:	ebfffdba 	bl	1114 <FPGA_JTAG_ISR>
    1a28:	ea000008 	b	1a50 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1a2c:	ebfffdb9 	bl	1118 <FPGA_IrDA_ISR>
    1a30:	ea000006 	b	1a50 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1a34:	ebfffdb8 	bl	111c <FPGA_JP1_ISR>
    1a38:	ea000004 	b	1a50 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1a3c:	ebfffdb7 	bl	1120 <FPGA_JP2_ISR>
    1a40:	ea000002 	b	1a50 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1a44:	ebfffdb6 	bl	1124 <FPGA_PS2_DUAL_ISR>
    1a48:	ea000000 	b	1a50 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1a4c:	eafffffe 	b	1a4c <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    1a50:	e30c3110 	movw	r3, #49424	; 0xc110
    1a54:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1a58:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1a5c:	e5832000 	str	r2, [r3]
}
    1a60:	e24bd018 	sub	sp, r11, #24
    1a64:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00001a68 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    1a68:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a6c:	e28db000 	add	r11, sp, #0
	while(1);
    1a70:	eafffffe 	b	1a70 <__cs3_reset+0x8>

00001a74 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1a74:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a78:	e28db000 	add	r11, sp, #0
	while(1);
    1a7c:	eafffffe 	b	1a7c <__cs3_isr_undef+0x8>

00001a80 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    1a80:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a84:	e28db000 	add	r11, sp, #0
	while(1);
    1a88:	eafffffe 	b	1a88 <__cs3_isr_swi+0x8>

00001a8c <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1a8c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a90:	e28db000 	add	r11, sp, #0
	while(1);
    1a94:	eafffffe 	b	1a94 <__cs3_isr_pabort+0x8>

00001a98 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    1a98:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a9c:	e28db000 	add	r11, sp, #0
	while(1);
    1aa0:	eafffffe 	b	1aa0 <__cs3_isr_dabort+0x8>

00001aa4 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1aa4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1aa8:	e28db000 	add	r11, sp, #0
	while(1);
    1aac:	eafffffe 	b	1aac <__cs3_isr_fiq+0x8>

00001ab0 <fix_bug>:
}

void fix_bug() {
    1ab0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1ab4:	e28db000 	add	r11, sp, #0
    1ab8:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1abc:	e30d3198 	movw	r3, #53656	; 0xd198
    1ac0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1ac4:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    1ac8:	e51b3008 	ldr	r3, [r11, #-8]
    1acc:	e3a02703 	mov	r2, #786432	; 0xc0000
    1ad0:	e5832000 	str	r2, [r3]
}
    1ad4:	e28bd000 	add	sp, r11, #0
    1ad8:	e8bd0800 	ldmfd	sp!, {r11}
    1adc:	e12fff1e 	bx	lr

00001ae0 <int_setup>:

void int_setup(int len, int* IDs) {
    1ae0:	e92d4800 	push	{r11, lr}
    1ae4:	e28db004 	add	r11, sp, #4
    1ae8:	e24dd008 	sub	sp, sp, #8
    1aec:	e50b0008 	str	r0, [r11, #-8]
    1af0:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1af4:	ebffff0e 	bl	1734 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1af8:	ebffff21 	bl	1784 <set_A9_IRQ_stack>
	fix_bug();
    1afc:	ebffffeb 	bl	1ab0 <fix_bug>
	config_GIC(len, IDs);
    1b00:	e51b0008 	ldr	r0, [r11, #-8]
    1b04:	e51b100c 	ldr	r1, [r11, #-12]
    1b08:	ebffff5b 	bl	187c <config_GIC>
	enable_A9_interrupts();
    1b0c:	ebffff12 	bl	175c <enable_A9_interrupts>
}
    1b10:	e24bd004 	sub	sp, r11, #4
    1b14:	e8bd8800 	pop	{r11, pc}

00001b18 <__aeabi_drsub>:
    1b18:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1b1c:	ea000000 	b	1b24 <__adddf3>

00001b20 <__aeabi_dsub>:
    1b20:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001b24 <__adddf3>:
    1b24:	e92d4030 	push	{r4, r5, lr}
    1b28:	e1a04081 	lsl	r4, r1, #1
    1b2c:	e1a05083 	lsl	r5, r3, #1
    1b30:	e1340005 	teq	r4, r5
    1b34:	01300002 	teqeq	r0, r2
    1b38:	1194c000 	orrsne	r12, r4, r0
    1b3c:	1195c002 	orrsne	r12, r5, r2
    1b40:	11f0cac4 	mvnsne	r12, r4, asr #21
    1b44:	11f0cac5 	mvnsne	r12, r5, asr #21
    1b48:	0a00008c 	beq	1d80 <__adddf3+0x25c>
    1b4c:	e1a04aa4 	lsr	r4, r4, #21
    1b50:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1b54:	b2655000 	rsblt	r5, r5, #0
    1b58:	da000006 	ble	1b78 <__adddf3+0x54>
    1b5c:	e0844005 	add	r4, r4, r5
    1b60:	e0202002 	eor	r2, r0, r2
    1b64:	e0213003 	eor	r3, r1, r3
    1b68:	e0220000 	eor	r0, r2, r0
    1b6c:	e0231001 	eor	r1, r3, r1
    1b70:	e0202002 	eor	r2, r0, r2
    1b74:	e0213003 	eor	r3, r1, r3
    1b78:	e3550036 	cmp	r5, #54	; 0x36
    1b7c:	88bd4030 	pophi	{r4, r5, lr}
    1b80:	812fff1e 	bxhi	lr
    1b84:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1b88:	e1a01601 	lsl	r1, r1, #12
    1b8c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1b90:	e18c1621 	orr	r1, r12, r1, lsr #12
    1b94:	0a000001 	beq	1ba0 <__adddf3+0x7c>
    1b98:	e2700000 	rsbs	r0, r0, #0
    1b9c:	e2e11000 	rsc	r1, r1, #0
    1ba0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1ba4:	e1a03603 	lsl	r3, r3, #12
    1ba8:	e18c3623 	orr	r3, r12, r3, lsr #12
    1bac:	0a000001 	beq	1bb8 <__adddf3+0x94>
    1bb0:	e2722000 	rsbs	r2, r2, #0
    1bb4:	e2e33000 	rsc	r3, r3, #0
    1bb8:	e1340005 	teq	r4, r5
    1bbc:	0a000069 	beq	1d68 <__adddf3+0x244>
    1bc0:	e2444001 	sub	r4, r4, #1
    1bc4:	e275e020 	rsbs	lr, r5, #32
    1bc8:	ba000005 	blt	1be4 <__adddf3+0xc0>
    1bcc:	e1a0ce12 	lsl	r12, r2, lr
    1bd0:	e0900532 	adds	r0, r0, r2, lsr r5
    1bd4:	e2a11000 	adc	r1, r1, #0
    1bd8:	e0900e13 	adds	r0, r0, r3, lsl lr
    1bdc:	e0b11553 	adcs	r1, r1, r3, asr r5
    1be0:	ea000006 	b	1c00 <__adddf3+0xdc>
    1be4:	e2455020 	sub	r5, r5, #32
    1be8:	e28ee020 	add	lr, lr, #32
    1bec:	e3520001 	cmp	r2, #1
    1bf0:	e1a0ce13 	lsl	r12, r3, lr
    1bf4:	238cc002 	orrcs	r12, r12, #2
    1bf8:	e0900553 	adds	r0, r0, r3, asr r5
    1bfc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1c00:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1c04:	5a000002 	bpl	1c14 <__adddf3+0xf0>
    1c08:	e27cc000 	rsbs	r12, r12, #0
    1c0c:	e2f00000 	rscs	r0, r0, #0
    1c10:	e2e11000 	rsc	r1, r1, #0
    1c14:	e3510601 	cmp	r1, #1048576	; 0x100000
    1c18:	3a00000f 	bcc	1c5c <__adddf3+0x138>
    1c1c:	e3510602 	cmp	r1, #2097152	; 0x200000
    1c20:	3a000006 	bcc	1c40 <__adddf3+0x11c>
    1c24:	e1b010a1 	lsrs	r1, r1, #1
    1c28:	e1b00060 	rrxs	r0, r0
    1c2c:	e1a0c06c 	rrx	r12, r12
    1c30:	e2844001 	add	r4, r4, #1
    1c34:	e1a02a84 	lsl	r2, r4, #21
    1c38:	e3720501 	cmn	r2, #4194304	; 0x400000
    1c3c:	2a00006b 	bcs	1df0 <__adddf3+0x2cc>
    1c40:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1c44:	01b0c0a0 	lsrseq	r12, r0, #1
    1c48:	e2b00000 	adcs	r0, r0, #0
    1c4c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1c50:	e1811005 	orr	r1, r1, r5
    1c54:	e8bd4030 	pop	{r4, r5, lr}
    1c58:	e12fff1e 	bx	lr
    1c5c:	e1b0c08c 	lsls	r12, r12, #1
    1c60:	e0b00000 	adcs	r0, r0, r0
    1c64:	e0a11001 	adc	r1, r1, r1
    1c68:	e3110601 	tst	r1, #1048576	; 0x100000
    1c6c:	e2444001 	sub	r4, r4, #1
    1c70:	1afffff2 	bne	1c40 <__adddf3+0x11c>
    1c74:	e3310000 	teq	r1, #0
    1c78:	13a03014 	movne	r3, #20
    1c7c:	03a03034 	moveq	r3, #52	; 0x34
    1c80:	01a01000 	moveq	r1, r0
    1c84:	03a00000 	moveq	r0, #0
    1c88:	e1a02001 	mov	r2, r1
    1c8c:	e3520801 	cmp	r2, #65536	; 0x10000
    1c90:	21a02822 	lsrcs	r2, r2, #16
    1c94:	22433010 	subcs	r3, r3, #16
    1c98:	e3520c01 	cmp	r2, #256	; 0x100
    1c9c:	21a02422 	lsrcs	r2, r2, #8
    1ca0:	22433008 	subcs	r3, r3, #8
    1ca4:	e3520010 	cmp	r2, #16
    1ca8:	21a02222 	lsrcs	r2, r2, #4
    1cac:	22433004 	subcs	r3, r3, #4
    1cb0:	e3520004 	cmp	r2, #4
    1cb4:	22433002 	subcs	r3, r3, #2
    1cb8:	304330a2 	subcc	r3, r3, r2, lsr #1
    1cbc:	e04331a2 	sub	r3, r3, r2, lsr #3
    1cc0:	e2532020 	subs	r2, r3, #32
    1cc4:	aa000007 	bge	1ce8 <__adddf3+0x1c4>
    1cc8:	e292200c 	adds	r2, r2, #12
    1ccc:	da000004 	ble	1ce4 <__adddf3+0x1c0>
    1cd0:	e282c014 	add	r12, r2, #20
    1cd4:	e262200c 	rsb	r2, r2, #12
    1cd8:	e1a00c11 	lsl	r0, r1, r12
    1cdc:	e1a01231 	lsr	r1, r1, r2
    1ce0:	ea000004 	b	1cf8 <__adddf3+0x1d4>
    1ce4:	e2822014 	add	r2, r2, #20
    1ce8:	d262c020 	rsble	r12, r2, #32
    1cec:	e1a01211 	lsl	r1, r1, r2
    1cf0:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1cf4:	d1a00210 	lslle	r0, r0, r2
    1cf8:	e0544003 	subs	r4, r4, r3
    1cfc:	a0811a04 	addge	r1, r1, r4, lsl #20
    1d00:	a1811005 	orrge	r1, r1, r5
    1d04:	a8bd4030 	popge	{r4, r5, lr}
    1d08:	a12fff1e 	bxge	lr
    1d0c:	e1e04004 	mvn	r4, r4
    1d10:	e254401f 	subs	r4, r4, #31
    1d14:	aa00000f 	bge	1d58 <__adddf3+0x234>
    1d18:	e294400c 	adds	r4, r4, #12
    1d1c:	ca000006 	bgt	1d3c <__adddf3+0x218>
    1d20:	e2844014 	add	r4, r4, #20
    1d24:	e2642020 	rsb	r2, r4, #32
    1d28:	e1a00430 	lsr	r0, r0, r4
    1d2c:	e1800211 	orr	r0, r0, r1, lsl r2
    1d30:	e1851431 	orr	r1, r5, r1, lsr r4
    1d34:	e8bd4030 	pop	{r4, r5, lr}
    1d38:	e12fff1e 	bx	lr
    1d3c:	e264400c 	rsb	r4, r4, #12
    1d40:	e2642020 	rsb	r2, r4, #32
    1d44:	e1a00230 	lsr	r0, r0, r2
    1d48:	e1800411 	orr	r0, r0, r1, lsl r4
    1d4c:	e1a01005 	mov	r1, r5
    1d50:	e8bd4030 	pop	{r4, r5, lr}
    1d54:	e12fff1e 	bx	lr
    1d58:	e1a00431 	lsr	r0, r1, r4
    1d5c:	e1a01005 	mov	r1, r5
    1d60:	e8bd4030 	pop	{r4, r5, lr}
    1d64:	e12fff1e 	bx	lr
    1d68:	e3340000 	teq	r4, #0
    1d6c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1d70:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1d74:	02844001 	addeq	r4, r4, #1
    1d78:	12455001 	subne	r5, r5, #1
    1d7c:	eaffff8f 	b	1bc0 <__adddf3+0x9c>
    1d80:	e1f0cac4 	mvns	r12, r4, asr #21
    1d84:	11f0cac5 	mvnsne	r12, r5, asr #21
    1d88:	0a00001d 	beq	1e04 <__adddf3+0x2e0>
    1d8c:	e1340005 	teq	r4, r5
    1d90:	01300002 	teqeq	r0, r2
    1d94:	0a000004 	beq	1dac <__adddf3+0x288>
    1d98:	e194c000 	orrs	r12, r4, r0
    1d9c:	01a01003 	moveq	r1, r3
    1da0:	01a00002 	moveq	r0, r2
    1da4:	e8bd4030 	pop	{r4, r5, lr}
    1da8:	e12fff1e 	bx	lr
    1dac:	e1310003 	teq	r1, r3
    1db0:	13a01000 	movne	r1, #0
    1db4:	13a00000 	movne	r0, #0
    1db8:	18bd4030 	popne	{r4, r5, lr}
    1dbc:	112fff1e 	bxne	lr
    1dc0:	e1b0caa4 	lsrs	r12, r4, #21
    1dc4:	1a000004 	bne	1ddc <__adddf3+0x2b8>
    1dc8:	e1b00080 	lsls	r0, r0, #1
    1dcc:	e0b11001 	adcs	r1, r1, r1
    1dd0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1dd4:	e8bd4030 	pop	{r4, r5, lr}
    1dd8:	e12fff1e 	bx	lr
    1ddc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1de0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1de4:	38bd4030 	popcc	{r4, r5, lr}
    1de8:	312fff1e 	bxcc	lr
    1dec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1df0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1df4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1df8:	e3a00000 	mov	r0, #0
    1dfc:	e8bd4030 	pop	{r4, r5, lr}
    1e00:	e12fff1e 	bx	lr
    1e04:	e1f0cac4 	mvns	r12, r4, asr #21
    1e08:	11a01003 	movne	r1, r3
    1e0c:	11a00002 	movne	r0, r2
    1e10:	01f0cac5 	mvnseq	r12, r5, asr #21
    1e14:	11a03001 	movne	r3, r1
    1e18:	11a02000 	movne	r2, r0
    1e1c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1e20:	01925603 	orrseq	r5, r2, r3, lsl #12
    1e24:	01310003 	teqeq	r1, r3
    1e28:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1e2c:	e8bd4030 	pop	{r4, r5, lr}
    1e30:	e12fff1e 	bx	lr

00001e34 <__aeabi_ui2d>:
    1e34:	e3300000 	teq	r0, #0
    1e38:	03a01000 	moveq	r1, #0
    1e3c:	012fff1e 	bxeq	lr
    1e40:	e92d4030 	push	{r4, r5, lr}
    1e44:	e3a04b01 	mov	r4, #1024	; 0x400
    1e48:	e2844032 	add	r4, r4, #50	; 0x32
    1e4c:	e3a05000 	mov	r5, #0
    1e50:	e3a01000 	mov	r1, #0
    1e54:	eaffff86 	b	1c74 <__adddf3+0x150>

00001e58 <__aeabi_i2d>:
    1e58:	e3300000 	teq	r0, #0
    1e5c:	03a01000 	moveq	r1, #0
    1e60:	012fff1e 	bxeq	lr
    1e64:	e92d4030 	push	{r4, r5, lr}
    1e68:	e3a04b01 	mov	r4, #1024	; 0x400
    1e6c:	e2844032 	add	r4, r4, #50	; 0x32
    1e70:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1e74:	42600000 	rsbmi	r0, r0, #0
    1e78:	e3a01000 	mov	r1, #0
    1e7c:	eaffff7c 	b	1c74 <__adddf3+0x150>

00001e80 <__aeabi_f2d>:
    1e80:	e1b02080 	lsls	r2, r0, #1
    1e84:	e1a011c2 	asr	r1, r2, #3
    1e88:	e1a01061 	rrx	r1, r1
    1e8c:	e1a00e02 	lsl	r0, r2, #28
    1e90:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1e94:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1e98:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1e9c:	112fff1e 	bxne	lr
    1ea0:	e3320000 	teq	r2, #0
    1ea4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1ea8:	012fff1e 	bxeq	lr
    1eac:	e92d4030 	push	{r4, r5, lr}
    1eb0:	e3a04d0e 	mov	r4, #896	; 0x380
    1eb4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1eb8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1ebc:	eaffff6c 	b	1c74 <__adddf3+0x150>

00001ec0 <__aeabi_ul2d>:
    1ec0:	e1902001 	orrs	r2, r0, r1
    1ec4:	012fff1e 	bxeq	lr
    1ec8:	e92d4030 	push	{r4, r5, lr}
    1ecc:	e3a05000 	mov	r5, #0
    1ed0:	ea000006 	b	1ef0 <__aeabi_l2d+0x1c>

00001ed4 <__aeabi_l2d>:
    1ed4:	e1902001 	orrs	r2, r0, r1
    1ed8:	012fff1e 	bxeq	lr
    1edc:	e92d4030 	push	{r4, r5, lr}
    1ee0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1ee4:	5a000001 	bpl	1ef0 <__aeabi_l2d+0x1c>
    1ee8:	e2700000 	rsbs	r0, r0, #0
    1eec:	e2e11000 	rsc	r1, r1, #0
    1ef0:	e3a04b01 	mov	r4, #1024	; 0x400
    1ef4:	e2844032 	add	r4, r4, #50	; 0x32
    1ef8:	e1b0cb21 	lsrs	r12, r1, #22
    1efc:	0affff44 	beq	1c14 <__adddf3+0xf0>
    1f00:	e3a02003 	mov	r2, #3
    1f04:	e1b0c1ac 	lsrs	r12, r12, #3
    1f08:	12822003 	addne	r2, r2, #3
    1f0c:	e1b0c1ac 	lsrs	r12, r12, #3
    1f10:	12822003 	addne	r2, r2, #3
    1f14:	e08221ac 	add	r2, r2, r12, lsr #3
    1f18:	e2623020 	rsb	r3, r2, #32
    1f1c:	e1a0c310 	lsl	r12, r0, r3
    1f20:	e1a00230 	lsr	r0, r0, r2
    1f24:	e1800311 	orr	r0, r0, r1, lsl r3
    1f28:	e1a01231 	lsr	r1, r1, r2
    1f2c:	e0844002 	add	r4, r4, r2
    1f30:	eaffff37 	b	1c14 <__adddf3+0xf0>

00001f34 <__gedf2>:
    1f34:	e3e0c000 	mvn	r12, #0
    1f38:	ea000002 	b	1f48 <__cmpdf2+0x4>

00001f3c <__ledf2>:
    1f3c:	e3a0c001 	mov	r12, #1
    1f40:	ea000000 	b	1f48 <__cmpdf2+0x4>

00001f44 <__cmpdf2>:
    1f44:	e3a0c001 	mov	r12, #1
    1f48:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    1f4c:	e1a0c081 	lsl	r12, r1, #1
    1f50:	e1f0cacc 	mvns	r12, r12, asr #21
    1f54:	e1a0c083 	lsl	r12, r3, #1
    1f58:	11f0cacc 	mvnsne	r12, r12, asr #21
    1f5c:	0a00000e 	beq	1f9c <__cmpdf2+0x58>
    1f60:	e28dd004 	add	sp, sp, #4
    1f64:	e190c081 	orrs	r12, r0, r1, lsl #1
    1f68:	0192c083 	orrseq	r12, r2, r3, lsl #1
    1f6c:	11310003 	teqne	r1, r3
    1f70:	01300002 	teqeq	r0, r2
    1f74:	03a00000 	moveq	r0, #0
    1f78:	012fff1e 	bxeq	lr
    1f7c:	e3700000 	cmn	r0, #0
    1f80:	e1310003 	teq	r1, r3
    1f84:	51510003 	cmppl	r1, r3
    1f88:	01500002 	cmpeq	r0, r2
    1f8c:	21a00fc3 	asrcs	r0, r3, #31
    1f90:	31e00fc3 	mvncc	r0, r3, asr #31
    1f94:	e3800001 	orr	r0, r0, #1
    1f98:	e12fff1e 	bx	lr
    1f9c:	e1a0c081 	lsl	r12, r1, #1
    1fa0:	e1f0cacc 	mvns	r12, r12, asr #21
    1fa4:	1a000001 	bne	1fb0 <__cmpdf2+0x6c>
    1fa8:	e190c601 	orrs	r12, r0, r1, lsl #12
    1fac:	1a000004 	bne	1fc4 <__cmpdf2+0x80>
    1fb0:	e1a0c083 	lsl	r12, r3, #1
    1fb4:	e1f0cacc 	mvns	r12, r12, asr #21
    1fb8:	1affffe8 	bne	1f60 <__cmpdf2+0x1c>
    1fbc:	e192c603 	orrs	r12, r2, r3, lsl #12
    1fc0:	0affffe6 	beq	1f60 <__cmpdf2+0x1c>
    1fc4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1fc8:	e12fff1e 	bx	lr

00001fcc <__aeabi_cdrcmple>:
    1fcc:	e1a0c000 	mov	r12, r0
    1fd0:	e1a00002 	mov	r0, r2
    1fd4:	e1a0200c 	mov	r2, r12
    1fd8:	e1a0c001 	mov	r12, r1
    1fdc:	e1a01003 	mov	r1, r3
    1fe0:	e1a0300c 	mov	r3, r12
    1fe4:	eaffffff 	b	1fe8 <__aeabi_cdcmpeq>

00001fe8 <__aeabi_cdcmpeq>:
    1fe8:	e92d4001 	push	{r0, lr}
    1fec:	ebffffd4 	bl	1f44 <__cmpdf2>
    1ff0:	e3500000 	cmp	r0, #0
    1ff4:	43700000 	cmnmi	r0, #0
    1ff8:	e8bd4001 	pop	{r0, lr}
    1ffc:	e12fff1e 	bx	lr

00002000 <__aeabi_dcmpeq>:
    2000:	e52de008 	str	lr, [sp, #-8]!
    2004:	ebfffff7 	bl	1fe8 <__aeabi_cdcmpeq>
    2008:	03a00001 	moveq	r0, #1
    200c:	13a00000 	movne	r0, #0
    2010:	e49de008 	ldr	lr, [sp], #8
    2014:	e12fff1e 	bx	lr

00002018 <__aeabi_dcmplt>:
    2018:	e52de008 	str	lr, [sp, #-8]!
    201c:	ebfffff1 	bl	1fe8 <__aeabi_cdcmpeq>
    2020:	33a00001 	movcc	r0, #1
    2024:	23a00000 	movcs	r0, #0
    2028:	e49de008 	ldr	lr, [sp], #8
    202c:	e12fff1e 	bx	lr

00002030 <__aeabi_dcmple>:
    2030:	e52de008 	str	lr, [sp, #-8]!
    2034:	ebffffeb 	bl	1fe8 <__aeabi_cdcmpeq>
    2038:	93a00001 	movls	r0, #1
    203c:	83a00000 	movhi	r0, #0
    2040:	e49de008 	ldr	lr, [sp], #8
    2044:	e12fff1e 	bx	lr

00002048 <__aeabi_dcmpge>:
    2048:	e52de008 	str	lr, [sp, #-8]!
    204c:	ebffffde 	bl	1fcc <__aeabi_cdrcmple>
    2050:	93a00001 	movls	r0, #1
    2054:	83a00000 	movhi	r0, #0
    2058:	e49de008 	ldr	lr, [sp], #8
    205c:	e12fff1e 	bx	lr

00002060 <__aeabi_dcmpgt>:
    2060:	e52de008 	str	lr, [sp, #-8]!
    2064:	ebffffd8 	bl	1fcc <__aeabi_cdrcmple>
    2068:	33a00001 	movcc	r0, #1
    206c:	23a00000 	movcs	r0, #0
    2070:	e49de008 	ldr	lr, [sp], #8
    2074:	e12fff1e 	bx	lr

00002078 <__aeabi_frsub>:
    2078:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    207c:	ea000000 	b	2084 <__addsf3>

00002080 <__aeabi_fsub>:
    2080:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00002084 <__addsf3>:
    2084:	e1b02080 	lsls	r2, r0, #1
    2088:	11b03081 	lslsne	r3, r1, #1
    208c:	11320003 	teqne	r2, r3
    2090:	11f0cc42 	mvnsne	r12, r2, asr #24
    2094:	11f0cc43 	mvnsne	r12, r3, asr #24
    2098:	0a000047 	beq	21bc <__addsf3+0x138>
    209c:	e1a02c22 	lsr	r2, r2, #24
    20a0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    20a4:	c0822003 	addgt	r2, r2, r3
    20a8:	c0201001 	eorgt	r1, r0, r1
    20ac:	c0210000 	eorgt	r0, r1, r0
    20b0:	c0201001 	eorgt	r1, r0, r1
    20b4:	b2633000 	rsblt	r3, r3, #0
    20b8:	e3530019 	cmp	r3, #25
    20bc:	812fff1e 	bxhi	lr
    20c0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    20c4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    20c8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    20cc:	12600000 	rsbne	r0, r0, #0
    20d0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    20d4:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    20d8:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    20dc:	12611000 	rsbne	r1, r1, #0
    20e0:	e1320003 	teq	r2, r3
    20e4:	0a00002e 	beq	21a4 <__addsf3+0x120>
    20e8:	e2422001 	sub	r2, r2, #1
    20ec:	e0900351 	adds	r0, r0, r1, asr r3
    20f0:	e2633020 	rsb	r3, r3, #32
    20f4:	e1a01311 	lsl	r1, r1, r3
    20f8:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    20fc:	5a000001 	bpl	2108 <__addsf3+0x84>
    2100:	e2711000 	rsbs	r1, r1, #0
    2104:	e2e00000 	rsc	r0, r0, #0
    2108:	e3500502 	cmp	r0, #8388608	; 0x800000
    210c:	3a00000b 	bcc	2140 <__addsf3+0xbc>
    2110:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2114:	3a000004 	bcc	212c <__addsf3+0xa8>
    2118:	e1b000a0 	lsrs	r0, r0, #1
    211c:	e1a01061 	rrx	r1, r1
    2120:	e2822001 	add	r2, r2, #1
    2124:	e35200fe 	cmp	r2, #254	; 0xfe
    2128:	2a000038 	bcs	2210 <__addsf3+0x18c>
    212c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2130:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2134:	03c00001 	biceq	r0, r0, #1
    2138:	e1800003 	orr	r0, r0, r3
    213c:	e12fff1e 	bx	lr
    2140:	e1b01081 	lsls	r1, r1, #1
    2144:	e0a00000 	adc	r0, r0, r0
    2148:	e3100502 	tst	r0, #8388608	; 0x800000
    214c:	e2422001 	sub	r2, r2, #1
    2150:	1afffff5 	bne	212c <__addsf3+0xa8>
    2154:	e1b0c620 	lsrs	r12, r0, #12
    2158:	01a00600 	lsleq	r0, r0, #12
    215c:	0242200c 	subeq	r2, r2, #12
    2160:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2164:	01a00400 	lsleq	r0, r0, #8
    2168:	02422008 	subeq	r2, r2, #8
    216c:	e310060f 	tst	r0, #15728640	; 0xf00000
    2170:	01a00200 	lsleq	r0, r0, #4
    2174:	02422004 	subeq	r2, r2, #4
    2178:	e3100503 	tst	r0, #12582912	; 0xc00000
    217c:	01a00100 	lsleq	r0, r0, #2
    2180:	02422002 	subeq	r2, r2, #2
    2184:	e3500502 	cmp	r0, #8388608	; 0x800000
    2188:	31a00080 	lslcc	r0, r0, #1
    218c:	e2d22000 	sbcs	r2, r2, #0
    2190:	a0800b82 	addge	r0, r0, r2, lsl #23
    2194:	b2622000 	rsblt	r2, r2, #0
    2198:	a1800003 	orrge	r0, r0, r3
    219c:	b1830230 	orrlt	r0, r3, r0, lsr r2
    21a0:	e12fff1e 	bx	lr
    21a4:	e3320000 	teq	r2, #0
    21a8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    21ac:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    21b0:	02822001 	addeq	r2, r2, #1
    21b4:	12433001 	subne	r3, r3, #1
    21b8:	eaffffca 	b	20e8 <__addsf3+0x64>
    21bc:	e1a03081 	lsl	r3, r1, #1
    21c0:	e1f0cc42 	mvns	r12, r2, asr #24
    21c4:	11f0cc43 	mvnsne	r12, r3, asr #24
    21c8:	0a000013 	beq	221c <__addsf3+0x198>
    21cc:	e1320003 	teq	r2, r3
    21d0:	0a000002 	beq	21e0 <__addsf3+0x15c>
    21d4:	e3320000 	teq	r2, #0
    21d8:	01a00001 	moveq	r0, r1
    21dc:	e12fff1e 	bx	lr
    21e0:	e1300001 	teq	r0, r1
    21e4:	13a00000 	movne	r0, #0
    21e8:	112fff1e 	bxne	lr
    21ec:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    21f0:	1a000002 	bne	2200 <__addsf3+0x17c>
    21f4:	e1b00080 	lsls	r0, r0, #1
    21f8:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    21fc:	e12fff1e 	bx	lr
    2200:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2204:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2208:	312fff1e 	bxcc	lr
    220c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2210:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2214:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2218:	e12fff1e 	bx	lr
    221c:	e1f02c42 	mvns	r2, r2, asr #24
    2220:	11a00001 	movne	r0, r1
    2224:	01f03c43 	mvnseq	r3, r3, asr #24
    2228:	11a01000 	movne	r1, r0
    222c:	e1b02480 	lsls	r2, r0, #9
    2230:	01b03481 	lslseq	r3, r1, #9
    2234:	01300001 	teqeq	r0, r1
    2238:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    223c:	e12fff1e 	bx	lr

00002240 <__aeabi_ui2f>:
    2240:	e3a03000 	mov	r3, #0
    2244:	ea000001 	b	2250 <__aeabi_i2f+0x8>

00002248 <__aeabi_i2f>:
    2248:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    224c:	42600000 	rsbmi	r0, r0, #0
    2250:	e1b0c000 	movs	r12, r0
    2254:	012fff1e 	bxeq	lr
    2258:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    225c:	e1a01000 	mov	r1, r0
    2260:	e3a00000 	mov	r0, #0
    2264:	ea00000f 	b	22a8 <__aeabi_l2f+0x30>

00002268 <__aeabi_ul2f>:
    2268:	e1902001 	orrs	r2, r0, r1
    226c:	012fff1e 	bxeq	lr
    2270:	e3a03000 	mov	r3, #0
    2274:	ea000005 	b	2290 <__aeabi_l2f+0x18>

00002278 <__aeabi_l2f>:
    2278:	e1902001 	orrs	r2, r0, r1
    227c:	012fff1e 	bxeq	lr
    2280:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    2284:	5a000001 	bpl	2290 <__aeabi_l2f+0x18>
    2288:	e2700000 	rsbs	r0, r0, #0
    228c:	e2e11000 	rsc	r1, r1, #0
    2290:	e1b0c001 	movs	r12, r1
    2294:	01a0c000 	moveq	r12, r0
    2298:	01a01000 	moveq	r1, r0
    229c:	03a00000 	moveq	r0, #0
    22a0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    22a4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    22a8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    22ac:	e3a02017 	mov	r2, #23
    22b0:	e35c0801 	cmp	r12, #65536	; 0x10000
    22b4:	21a0c82c 	lsrcs	r12, r12, #16
    22b8:	22422010 	subcs	r2, r2, #16
    22bc:	e35c0c01 	cmp	r12, #256	; 0x100
    22c0:	21a0c42c 	lsrcs	r12, r12, #8
    22c4:	22422008 	subcs	r2, r2, #8
    22c8:	e35c0010 	cmp	r12, #16
    22cc:	21a0c22c 	lsrcs	r12, r12, #4
    22d0:	22422004 	subcs	r2, r2, #4
    22d4:	e35c0004 	cmp	r12, #4
    22d8:	22422002 	subcs	r2, r2, #2
    22dc:	304220ac 	subcc	r2, r2, r12, lsr #1
    22e0:	e05221ac 	subs	r2, r2, r12, lsr #3
    22e4:	e0433b82 	sub	r3, r3, r2, lsl #23
    22e8:	ba000006 	blt	2308 <__aeabi_l2f+0x90>
    22ec:	e0833211 	add	r3, r3, r1, lsl r2
    22f0:	e1a0c210 	lsl	r12, r0, r2
    22f4:	e2622020 	rsb	r2, r2, #32
    22f8:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    22fc:	e0a30230 	adc	r0, r3, r0, lsr r2
    2300:	03c00001 	biceq	r0, r0, #1
    2304:	e12fff1e 	bx	lr
    2308:	e2822020 	add	r2, r2, #32
    230c:	e1a0c211 	lsl	r12, r1, r2
    2310:	e2622020 	rsb	r2, r2, #32
    2314:	e190008c 	orrs	r0, r0, r12, lsl #1
    2318:	e0a30231 	adc	r0, r3, r1, lsr r2
    231c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2320:	e12fff1e 	bx	lr

00002324 <__aeabi_fmul>:
    2324:	e3a0c0ff 	mov	r12, #255	; 0xff
    2328:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    232c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2330:	1132000c 	teqne	r2, r12
    2334:	1133000c 	teqne	r3, r12
    2338:	0a00003e 	beq	2438 <__aeabi_fmul+0x114>
    233c:	e0822003 	add	r2, r2, r3
    2340:	e020c001 	eor	r12, r0, r1
    2344:	e1b00480 	lsls	r0, r0, #9
    2348:	11b01481 	lslsne	r1, r1, #9
    234c:	0a000010 	beq	2394 <__aeabi_fmul+0x70>
    2350:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2354:	e18302a0 	orr	r0, r3, r0, lsr #5
    2358:	e18312a1 	orr	r1, r3, r1, lsr #5
    235c:	e0813190 	umull	r3, r1, r0, r1
    2360:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2364:	e3510502 	cmp	r1, #8388608	; 0x800000
    2368:	31a01081 	lslcc	r1, r1, #1
    236c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2370:	31a03083 	lslcc	r3, r3, #1
    2374:	e1800001 	orr	r0, r0, r1
    2378:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    237c:	e35200fd 	cmp	r2, #253	; 0xfd
    2380:	8a00000f 	bhi	23c4 <__aeabi_fmul+0xa0>
    2384:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2388:	e0a00b82 	adc	r0, r0, r2, lsl #23
    238c:	03c00001 	biceq	r0, r0, #1
    2390:	e12fff1e 	bx	lr
    2394:	e3300000 	teq	r0, #0
    2398:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    239c:	01a01481 	lsleq	r1, r1, #9
    23a0:	e18c04a0 	orr	r0, r12, r0, lsr #9
    23a4:	e18004a1 	orr	r0, r0, r1, lsr #9
    23a8:	e252207f 	subs	r2, r2, #127	; 0x7f
    23ac:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    23b0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    23b4:	c12fff1e 	bxgt	lr
    23b8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    23bc:	e3a03000 	mov	r3, #0
    23c0:	e2522001 	subs	r2, r2, #1
    23c4:	ca000035 	bgt	24a0 <__aeabi_fmul+0x17c>
    23c8:	e3720019 	cmn	r2, #25
    23cc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    23d0:	d12fff1e 	bxle	lr
    23d4:	e2622000 	rsb	r2, r2, #0
    23d8:	e1b01080 	lsls	r1, r0, #1
    23dc:	e1a01231 	lsr	r1, r1, r2
    23e0:	e2622020 	rsb	r2, r2, #32
    23e4:	e1a0c210 	lsl	r12, r0, r2
    23e8:	e1b00061 	rrxs	r0, r1
    23ec:	e2a00000 	adc	r0, r0, #0
    23f0:	e193308c 	orrs	r3, r3, r12, lsl #1
    23f4:	01c00fac 	biceq	r0, r0, r12, lsr #31
    23f8:	e12fff1e 	bx	lr
    23fc:	e3320000 	teq	r2, #0
    2400:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2404:	01a00080 	lsleq	r0, r0, #1
    2408:	03100502 	tsteq	r0, #8388608	; 0x800000
    240c:	02422001 	subeq	r2, r2, #1
    2410:	0afffffb 	beq	2404 <__aeabi_fmul+0xe0>
    2414:	e180000c 	orr	r0, r0, r12
    2418:	e3330000 	teq	r3, #0
    241c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2420:	01a01081 	lsleq	r1, r1, #1
    2424:	03110502 	tsteq	r1, #8388608	; 0x800000
    2428:	02433001 	subeq	r3, r3, #1
    242c:	0afffffb 	beq	2420 <__aeabi_fmul+0xfc>
    2430:	e181100c 	orr	r1, r1, r12
    2434:	eaffffc0 	b	233c <__aeabi_fmul+0x18>
    2438:	e00c3ba1 	and	r3, r12, r1, lsr #23
    243c:	e132000c 	teq	r2, r12
    2440:	1133000c 	teqne	r3, r12
    2444:	0a000005 	beq	2460 <__aeabi_fmul+0x13c>
    2448:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    244c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2450:	1affffe9 	bne	23fc <__aeabi_fmul+0xd8>
    2454:	e0200001 	eor	r0, r0, r1
    2458:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    245c:	e12fff1e 	bx	lr
    2460:	e3300000 	teq	r0, #0
    2464:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2468:	01a00001 	moveq	r0, r1
    246c:	13310000 	teqne	r1, #0
    2470:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2474:	0a00000d 	beq	24b0 <__aeabi_fmul+0x18c>
    2478:	e132000c 	teq	r2, r12
    247c:	1a000001 	bne	2488 <__aeabi_fmul+0x164>
    2480:	e1b02480 	lsls	r2, r0, #9
    2484:	1a000009 	bne	24b0 <__aeabi_fmul+0x18c>
    2488:	e133000c 	teq	r3, r12
    248c:	1a000002 	bne	249c <__aeabi_fmul+0x178>
    2490:	e1b03481 	lsls	r3, r1, #9
    2494:	11a00001 	movne	r0, r1
    2498:	1a000004 	bne	24b0 <__aeabi_fmul+0x18c>
    249c:	e0200001 	eor	r0, r0, r1
    24a0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    24a4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    24a8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24ac:	e12fff1e 	bx	lr
    24b0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    24b4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    24b8:	e12fff1e 	bx	lr

000024bc <__aeabi_fdiv>:
    24bc:	e3a0c0ff 	mov	r12, #255	; 0xff
    24c0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    24c4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    24c8:	1132000c 	teqne	r2, r12
    24cc:	1133000c 	teqne	r3, r12
    24d0:	0a00003a 	beq	25c0 <__aeabi_fdiv+0x104>
    24d4:	e0422003 	sub	r2, r2, r3
    24d8:	e020c001 	eor	r12, r0, r1
    24dc:	e1b01481 	lsls	r1, r1, #9
    24e0:	e1a00480 	lsl	r0, r0, #9
    24e4:	0a00001c 	beq	255c <__aeabi_fdiv+0xa0>
    24e8:	e3a03201 	mov	r3, #268435456	; 0x10000000
    24ec:	e1831221 	orr	r1, r3, r1, lsr #4
    24f0:	e1833220 	orr	r3, r3, r0, lsr #4
    24f4:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    24f8:	e1530001 	cmp	r3, r1
    24fc:	31a03083 	lslcc	r3, r3, #1
    2500:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2504:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2508:	e1530001 	cmp	r3, r1
    250c:	20433001 	subcs	r3, r3, r1
    2510:	2180000c 	orrcs	r0, r0, r12
    2514:	e15300a1 	cmp	r3, r1, lsr #1
    2518:	204330a1 	subcs	r3, r3, r1, lsr #1
    251c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2520:	e1530121 	cmp	r3, r1, lsr #2
    2524:	20433121 	subcs	r3, r3, r1, lsr #2
    2528:	2180012c 	orrcs	r0, r0, r12, lsr #2
    252c:	e15301a1 	cmp	r3, r1, lsr #3
    2530:	204331a1 	subcs	r3, r3, r1, lsr #3
    2534:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2538:	e1b03203 	lsls	r3, r3, #4
    253c:	11b0c22c 	lsrsne	r12, r12, #4
    2540:	1afffff0 	bne	2508 <__aeabi_fdiv+0x4c>
    2544:	e35200fd 	cmp	r2, #253	; 0xfd
    2548:	8affff9d 	bhi	23c4 <__aeabi_fmul+0xa0>
    254c:	e1530001 	cmp	r3, r1
    2550:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2554:	03c00001 	biceq	r0, r0, #1
    2558:	e12fff1e 	bx	lr
    255c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2560:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2564:	e292207f 	adds	r2, r2, #127	; 0x7f
    2568:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    256c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2570:	c12fff1e 	bxgt	lr
    2574:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2578:	e3a03000 	mov	r3, #0
    257c:	e2522001 	subs	r2, r2, #1
    2580:	eaffff8f 	b	23c4 <__aeabi_fmul+0xa0>
    2584:	e3320000 	teq	r2, #0
    2588:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    258c:	01a00080 	lsleq	r0, r0, #1
    2590:	03100502 	tsteq	r0, #8388608	; 0x800000
    2594:	02422001 	subeq	r2, r2, #1
    2598:	0afffffb 	beq	258c <__aeabi_fdiv+0xd0>
    259c:	e180000c 	orr	r0, r0, r12
    25a0:	e3330000 	teq	r3, #0
    25a4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    25a8:	01a01081 	lsleq	r1, r1, #1
    25ac:	03110502 	tsteq	r1, #8388608	; 0x800000
    25b0:	02433001 	subeq	r3, r3, #1
    25b4:	0afffffb 	beq	25a8 <__aeabi_fdiv+0xec>
    25b8:	e181100c 	orr	r1, r1, r12
    25bc:	eaffffc4 	b	24d4 <__aeabi_fdiv+0x18>
    25c0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    25c4:	e132000c 	teq	r2, r12
    25c8:	1a000005 	bne	25e4 <__aeabi_fdiv+0x128>
    25cc:	e1b02480 	lsls	r2, r0, #9
    25d0:	1affffb6 	bne	24b0 <__aeabi_fmul+0x18c>
    25d4:	e133000c 	teq	r3, r12
    25d8:	1affffaf 	bne	249c <__aeabi_fmul+0x178>
    25dc:	e1a00001 	mov	r0, r1
    25e0:	eaffffb2 	b	24b0 <__aeabi_fmul+0x18c>
    25e4:	e133000c 	teq	r3, r12
    25e8:	1a000003 	bne	25fc <__aeabi_fdiv+0x140>
    25ec:	e1b03481 	lsls	r3, r1, #9
    25f0:	0affff97 	beq	2454 <__aeabi_fmul+0x130>
    25f4:	e1a00001 	mov	r0, r1
    25f8:	eaffffac 	b	24b0 <__aeabi_fmul+0x18c>
    25fc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2600:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2604:	1affffde 	bne	2584 <__aeabi_fdiv+0xc8>
    2608:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    260c:	1affffa2 	bne	249c <__aeabi_fmul+0x178>
    2610:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2614:	1affff8e 	bne	2454 <__aeabi_fmul+0x130>
    2618:	eaffffa4 	b	24b0 <__aeabi_fmul+0x18c>

0000261c <__aeabi_f2iz>:
    261c:	e1a02080 	lsl	r2, r0, #1
    2620:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2624:	3a000008 	bcc	264c <__aeabi_f2iz+0x30>
    2628:	e3a0309e 	mov	r3, #158	; 0x9e
    262c:	e0532c22 	subs	r2, r3, r2, lsr #24
    2630:	9a000007 	bls	2654 <__aeabi_f2iz+0x38>
    2634:	e1a03400 	lsl	r3, r0, #8
    2638:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    263c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2640:	e1a00233 	lsr	r0, r3, r2
    2644:	12600000 	rsbne	r0, r0, #0
    2648:	e12fff1e 	bx	lr
    264c:	e3a00000 	mov	r0, #0
    2650:	e12fff1e 	bx	lr
    2654:	e3720061 	cmn	r2, #97	; 0x61
    2658:	1a000001 	bne	2664 <__aeabi_f2iz+0x48>
    265c:	e1b02480 	lsls	r2, r0, #9
    2660:	1a000002 	bne	2670 <__aeabi_f2iz+0x54>
    2664:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2668:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    266c:	e12fff1e 	bx	lr
    2670:	e3a00000 	mov	r0, #0
    2674:	e12fff1e 	bx	lr

00002678 <atexit>:
    2678:	e1a01000 	mov	r1, r0
    267c:	e3a00000 	mov	r0, #0
    2680:	e92d4008 	push	{r3, lr}
    2684:	e1a02000 	mov	r2, r0
    2688:	e1a03000 	mov	r3, r0
    268c:	eb00000e 	bl	26cc <__register_exitproc>
    2690:	e8bd4008 	pop	{r3, lr}
    2694:	e12fff1e 	bx	lr

00002698 <exit>:
    2698:	e92d4008 	push	{r3, lr}
    269c:	e3a01000 	mov	r1, #0
    26a0:	e1a04000 	mov	r4, r0
    26a4:	eb000045 	bl	27c0 <__call_exitprocs>
    26a8:	e59f3018 	ldr	r3, [pc, #24]	; 26c8 <exit+0x30>
    26ac:	e5930000 	ldr	r0, [r3]
    26b0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    26b4:	e3530000 	cmp	r3, #0
    26b8:	11a0e00f 	movne	lr, pc
    26bc:	112fff13 	bxne	r3
    26c0:	e1a00004 	mov	r0, r4
    26c4:	eb0000c9 	bl	29f0 <_exit>
    26c8:	00002aa4 	.word	0x00002aa4

000026cc <__register_exitproc>:
    26cc:	e59fc0e4 	ldr	r12, [pc, #228]	; 27b8 <__register_exitproc+0xec>
    26d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    26d4:	e59c4000 	ldr	r4, [r12]
    26d8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    26dc:	e35c0000 	cmp	r12, #0
    26e0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    26e4:	e59c5004 	ldr	r5, [r12, #4]
    26e8:	0584c148 	streq	r12, [r4, #328]	; 0x148
    26ec:	e355001f 	cmp	r5, #31
    26f0:	e24dd010 	sub	sp, sp, #16
    26f4:	e1a06000 	mov	r6, r0
    26f8:	da000015 	ble	2754 <__register_exitproc+0x88>
    26fc:	e59f00b8 	ldr	r0, [pc, #184]	; 27bc <__register_exitproc+0xf0>
    2700:	e3500000 	cmp	r0, #0
    2704:	1a000001 	bne	2710 <__register_exitproc+0x44>
    2708:	e3e00000 	mvn	r0, #0
    270c:	ea000018 	b	2774 <__register_exitproc+0xa8>
    2710:	e3a00e19 	mov	r0, #400	; 0x190
    2714:	e58d100c 	str	r1, [sp, #12]
    2718:	e58d2008 	str	r2, [sp, #8]
    271c:	e58d3004 	str	r3, [sp, #4]
    2720:	e320f000 	nop	{0}
    2724:	e250c000 	subs	r12, r0, #0
    2728:	e59d100c 	ldr	r1, [sp, #12]
    272c:	e59d2008 	ldr	r2, [sp, #8]
    2730:	e59d3004 	ldr	r3, [sp, #4]
    2734:	0afffff3 	beq	2708 <__register_exitproc+0x3c>
    2738:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    273c:	e3a00000 	mov	r0, #0
    2740:	e58c0004 	str	r0, [r12, #4]
    2744:	e58c5000 	str	r5, [r12]
    2748:	e584c148 	str	r12, [r4, #328]	; 0x148
    274c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2750:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2754:	e3560000 	cmp	r6, #0
    2758:	e59c4004 	ldr	r4, [r12, #4]
    275c:	1a000007 	bne	2780 <__register_exitproc+0xb4>
    2760:	e2843002 	add	r3, r4, #2
    2764:	e2844001 	add	r4, r4, #1
    2768:	e78c1103 	str	r1, [r12, r3, lsl #2]
    276c:	e58c4004 	str	r4, [r12, #4]
    2770:	e3a00000 	mov	r0, #0
    2774:	e28dd010 	add	sp, sp, #16
    2778:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    277c:	e12fff1e 	bx	lr
    2780:	e3a00001 	mov	r0, #1
    2784:	e1a00410 	lsl	r0, r0, r4
    2788:	e08c8104 	add	r8, r12, r4, lsl #2
    278c:	e3560002 	cmp	r6, #2
    2790:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2794:	e5883108 	str	r3, [r8, #264]	; 0x108
    2798:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    279c:	e1877000 	orr	r7, r7, r0
    27a0:	01830000 	orreq	r0, r3, r0
    27a4:	e1a05008 	mov	r5, r8
    27a8:	e5882088 	str	r2, [r8, #136]	; 0x88
    27ac:	e58c7188 	str	r7, [r12, #392]	; 0x188
    27b0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    27b4:	eaffffe9 	b	2760 <__register_exitproc+0x94>
    27b8:	00002aa4 	.word	0x00002aa4
    27bc:	00000000 	.word	0x00000000

000027c0 <__call_exitprocs>:
    27c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    27c4:	e59f3168 	ldr	r3, [pc, #360]	; 2934 <__call_exitprocs+0x174>
    27c8:	e5933000 	ldr	r3, [r3]
    27cc:	e24dd014 	sub	sp, sp, #20
    27d0:	e58d3004 	str	r3, [sp, #4]
    27d4:	e2833f52 	add	r3, r3, #328	; 0x148
    27d8:	e58d0008 	str	r0, [sp, #8]
    27dc:	e58d300c 	str	r3, [sp, #12]
    27e0:	e1a07001 	mov	r7, r1
    27e4:	e3a08001 	mov	r8, #1
    27e8:	e59d3004 	ldr	r3, [sp, #4]
    27ec:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    27f0:	e3560000 	cmp	r6, #0
    27f4:	e59db00c 	ldr	r11, [sp, #12]
    27f8:	0a000033 	beq	28cc <__call_exitprocs+0x10c>
    27fc:	e5965004 	ldr	r5, [r6, #4]
    2800:	e2554001 	subs	r4, r5, #1
    2804:	5286a088 	addpl	r10, r6, #136	; 0x88
    2808:	5285501f 	addpl	r5, r5, #31
    280c:	508a5105 	addpl	r5, r10, r5, lsl #2
    2810:	5a000007 	bpl	2834 <__call_exitprocs+0x74>
    2814:	ea000029 	b	28c0 <__call_exitprocs+0x100>
    2818:	e5953000 	ldr	r3, [r5]
    281c:	e1530007 	cmp	r3, r7
    2820:	0a000005 	beq	283c <__call_exitprocs+0x7c>
    2824:	e2444001 	sub	r4, r4, #1
    2828:	e3740001 	cmn	r4, #1
    282c:	e2455004 	sub	r5, r5, #4
    2830:	0a000022 	beq	28c0 <__call_exitprocs+0x100>
    2834:	e3570000 	cmp	r7, #0
    2838:	1afffff6 	bne	2818 <__call_exitprocs+0x58>
    283c:	e5963004 	ldr	r3, [r6, #4]
    2840:	e06a2005 	rsb	r2, r10, r5
    2844:	e2433001 	sub	r3, r3, #1
    2848:	e0862002 	add	r2, r6, r2
    284c:	e1530004 	cmp	r3, r4
    2850:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2854:	13a01000 	movne	r1, #0
    2858:	05864004 	streq	r4, [r6, #4]
    285c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2860:	e3530000 	cmp	r3, #0
    2864:	0affffee 	beq	2824 <__call_exitprocs+0x64>
    2868:	e1a02418 	lsl	r2, r8, r4
    286c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2870:	e1120001 	tst	r2, r1
    2874:	e5969004 	ldr	r9, [r6, #4]
    2878:	0a000016 	beq	28d8 <__call_exitprocs+0x118>
    287c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2880:	e1120001 	tst	r2, r1
    2884:	1a000016 	bne	28e4 <__call_exitprocs+0x124>
    2888:	e59d0008 	ldr	r0, [sp, #8]
    288c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2890:	e1a0e00f 	mov	lr, pc
    2894:	e12fff13 	bx	r3
    2898:	e5963004 	ldr	r3, [r6, #4]
    289c:	e1530009 	cmp	r3, r9
    28a0:	1affffd0 	bne	27e8 <__call_exitprocs+0x28>
    28a4:	e59b3000 	ldr	r3, [r11]
    28a8:	e1530006 	cmp	r3, r6
    28ac:	1affffcd 	bne	27e8 <__call_exitprocs+0x28>
    28b0:	e2444001 	sub	r4, r4, #1
    28b4:	e3740001 	cmn	r4, #1
    28b8:	e2455004 	sub	r5, r5, #4
    28bc:	1affffdc 	bne	2834 <__call_exitprocs+0x74>
    28c0:	e59f1070 	ldr	r1, [pc, #112]	; 2938 <__call_exitprocs+0x178>
    28c4:	e3510000 	cmp	r1, #0
    28c8:	1a000009 	bne	28f4 <__call_exitprocs+0x134>
    28cc:	e28dd014 	add	sp, sp, #20
    28d0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    28d4:	e12fff1e 	bx	lr
    28d8:	e1a0e00f 	mov	lr, pc
    28dc:	e12fff13 	bx	r3
    28e0:	eaffffec 	b	2898 <__call_exitprocs+0xd8>
    28e4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    28e8:	e1a0e00f 	mov	lr, pc
    28ec:	e12fff13 	bx	r3
    28f0:	eaffffe8 	b	2898 <__call_exitprocs+0xd8>
    28f4:	e5963004 	ldr	r3, [r6, #4]
    28f8:	e3530000 	cmp	r3, #0
    28fc:	e5963000 	ldr	r3, [r6]
    2900:	1a000008 	bne	2928 <__call_exitprocs+0x168>
    2904:	e3530000 	cmp	r3, #0
    2908:	0a000006 	beq	2928 <__call_exitprocs+0x168>
    290c:	e1a00006 	mov	r0, r6
    2910:	e58b3000 	str	r3, [r11]
    2914:	e320f000 	nop	{0}
    2918:	e59b6000 	ldr	r6, [r11]
    291c:	e3560000 	cmp	r6, #0
    2920:	1affffb5 	bne	27fc <__call_exitprocs+0x3c>
    2924:	eaffffe8 	b	28cc <__call_exitprocs+0x10c>
    2928:	e1a0b006 	mov	r11, r6
    292c:	e1a06003 	mov	r6, r3
    2930:	eafffff9 	b	291c <__call_exitprocs+0x15c>
    2934:	00002aa4 	.word	0x00002aa4
    2938:	00000000 	.word	0x00000000

0000293c <register_fini>:
    293c:	e92d4008 	push	{r3, lr}
    2940:	e59f3010 	ldr	r3, [pc, #16]	; 2958 <register_fini+0x1c>
    2944:	e3530000 	cmp	r3, #0
    2948:	159f000c 	ldrne	r0, [pc, #12]	; 295c <register_fini+0x20>
    294c:	1bffff49 	blne	2678 <atexit>
    2950:	e8bd4008 	pop	{r3, lr}
    2954:	e12fff1e 	bx	lr
    2958:	00002acc 	.word	0x00002acc
    295c:	00002960 	.word	0x00002960

00002960 <__libc_fini_array>:
    2960:	e92d4038 	push	{r3, r4, r5, lr}
    2964:	e59f5030 	ldr	r5, [pc, #48]	; 299c <__libc_fini_array+0x3c>
    2968:	e59f4030 	ldr	r4, [pc, #48]	; 29a0 <__libc_fini_array+0x40>
    296c:	e0654004 	rsb	r4, r5, r4
    2970:	e1b04144 	asrs	r4, r4, #2
    2974:	10855104 	addne	r5, r5, r4, lsl #2
    2978:	0a000004 	beq	2990 <__libc_fini_array+0x30>
    297c:	e5353004 	ldr	r3, [r5, #-4]!
    2980:	e1a0e00f 	mov	lr, pc
    2984:	e12fff13 	bx	r3
    2988:	e2544001 	subs	r4, r4, #1
    298c:	1afffffa 	bne	297c <__libc_fini_array+0x1c>
    2990:	eb00004d 	bl	2acc <__libc_fini>
    2994:	e8bd4038 	pop	{r3, r4, r5, lr}
    2998:	e12fff1e 	bx	lr
    299c:	00002ae4 	.word	0x00002ae4
    29a0:	00002ae8 	.word	0x00002ae8

000029a4 <__cs3_premain>:
    29a4:	e92d4008 	push	{r3, lr}
    29a8:	eb000017 	bl	2a0c <__libc_init_array>
    29ac:	e59f3030 	ldr	r3, [pc, #48]	; 29e4 <__cs3_premain+0x40>
    29b0:	e3530000 	cmp	r3, #0
    29b4:	15930000 	ldrne	r0, [r3]
    29b8:	01a00003 	moveq	r0, r3
    29bc:	e59f3024 	ldr	r3, [pc, #36]	; 29e8 <__cs3_premain+0x44>
    29c0:	e3530000 	cmp	r3, #0
    29c4:	15931000 	ldrne	r1, [r3]
    29c8:	01a01003 	moveq	r1, r3
    29cc:	e3a02000 	mov	r2, #0
    29d0:	ebfff6cc 	bl	508 <main>
    29d4:	e59f3010 	ldr	r3, [pc, #16]	; 29ec <__cs3_premain+0x48>
    29d8:	e3530000 	cmp	r3, #0
    29dc:	1bffff2d 	blne	2698 <exit>
    29e0:	eafffffe 	b	29e0 <__cs3_premain+0x3c>
	...
    29ec:	00002698 	.word	0x00002698

000029f0 <_exit>:
    29f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    29f4:	e3a00018 	mov	r0, #24
    29f8:	e59f1004 	ldr	r1, [pc, #4]	; 2a04 <_exit+0x14>
    29fc:	ef123456 	svc	0x00123456
    2a00:	eafffffe 	b	2a00 <_exit+0x10>
    2a04:	00020026 	.word	0x00020026

00002a08 <__cs3_isr_interrupt>:
    2a08:	eafffffe 	b	2a08 <__cs3_isr_interrupt>

00002a0c <__libc_init_array>:
    2a0c:	e92d4070 	push	{r4, r5, r6, lr}
    2a10:	e59f506c 	ldr	r5, [pc, #108]	; 2a84 <__libc_init_array+0x78>
    2a14:	e59f606c 	ldr	r6, [pc, #108]	; 2a88 <__libc_init_array+0x7c>
    2a18:	e0656006 	rsb	r6, r5, r6
    2a1c:	e1b06146 	asrs	r6, r6, #2
    2a20:	12455004 	subne	r5, r5, #4
    2a24:	13a04000 	movne	r4, #0
    2a28:	0a000005 	beq	2a44 <__libc_init_array+0x38>
    2a2c:	e5b53004 	ldr	r3, [r5, #4]!
    2a30:	e2844001 	add	r4, r4, #1
    2a34:	e1a0e00f 	mov	lr, pc
    2a38:	e12fff13 	bx	r3
    2a3c:	e1560004 	cmp	r6, r4
    2a40:	1afffff9 	bne	2a2c <__libc_init_array+0x20>
    2a44:	e59f5040 	ldr	r5, [pc, #64]	; 2a8c <__libc_init_array+0x80>
    2a48:	e59f6040 	ldr	r6, [pc, #64]	; 2a90 <__libc_init_array+0x84>
    2a4c:	e0656006 	rsb	r6, r5, r6
    2a50:	eb000015 	bl	2aac <_init>
    2a54:	e1b06146 	asrs	r6, r6, #2
    2a58:	12455004 	subne	r5, r5, #4
    2a5c:	13a04000 	movne	r4, #0
    2a60:	0a000005 	beq	2a7c <__libc_init_array+0x70>
    2a64:	e5b53004 	ldr	r3, [r5, #4]!
    2a68:	e2844001 	add	r4, r4, #1
    2a6c:	e1a0e00f 	mov	lr, pc
    2a70:	e12fff13 	bx	r3
    2a74:	e1560004 	cmp	r6, r4
    2a78:	1afffff9 	bne	2a64 <__libc_init_array+0x58>
    2a7c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2a80:	e12fff1e 	bx	lr
    2a84:	00002ac4 	.word	0x00002ac4
    2a88:	00002ac4 	.word	0x00002ac4
    2a8c:	00002ac4 	.word	0x00002ac4
    2a90:	00002acc 	.word	0x00002acc

Disassembly of section .rodata:

00002a98 <_global_impure_ptr-0xc>:
    2a98:	000000c7 	.word	0x000000c7
    2a9c:	000000c8 	.word	0x000000c8
    2aa0:	000000c9 	.word	0x000000c9

00002aa4 <_global_impure_ptr>:
    2aa4:	00031918 00000043                       ....C...

00002aac <_init>:
    2aac:	e1a0c00d 	mov	r12, sp
    2ab0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2ab4:	e24cb004 	sub	r11, r12, #4
    2ab8:	e24bd028 	sub	sp, r11, #40	; 0x28
    2abc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2ac0:	e12fff1e 	bx	lr

00002ac4 <__init_array_start>:
    2ac4:	0000293c 	.word	0x0000293c

00002ac8 <__frame_dummy_init_array_entry>:
    2ac8:	00000208                                ....

00002acc <__libc_fini>:
    2acc:	e1a0c00d 	mov	r12, sp
    2ad0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2ad4:	e24cb004 	sub	r11, r12, #4
    2ad8:	e24bd028 	sub	sp, r11, #40	; 0x28
    2adc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2ae0:	e12fff1e 	bx	lr

00002ae4 <__fini_array_start>:
    2ae4:	000001c4 	.word	0x000001c4

00002ae8 <__cs3_regions>:
    2ae8:	00000000 	.word	0x00000000
    2aec:	00000040 	.word	0x00000040
    2af0:	00000040 	.word	0x00000040
    2af4:	00031d08 	.word	0x00031d08
    2af8:	00177a20 	.word	0x00177a20

00002afc <__cs3_regions_end>:
    2afc:	00000000 	.word	0x00000000
